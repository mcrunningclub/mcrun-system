{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"projects/attendance-master-code-old/","title":"McRUN Master Attendance Google Apps Script","text":""},{"location":"projects/attendance-master-code-old/#about","title":"About","text":"<p>This project automates and manages attendance tracking for McRUN events using Google Sheets and Google Apps Script. It provides tools for formatting, exporting, and maintaining attendance data, ensuring consistency and seamless integration with a semester attendance sheet.</p> <p>Key Features</p> <ul> <li>Automatic formatting of names and columns for readability</li> <li>Export of new submissions to a semester attendance sheet</li> <li>Sheet maintenance (sorting, prettifying, and marking exports)</li> <li>Timezone-aware date handling</li> </ul>"},{"location":"projects/attendance-master-code-old/#files","title":"Files","text":""},{"location":"projects/attendance-master-code-old/#github-repo","title":"Github repo","text":"<p>mcrun-master-attendance</p>"},{"location":"projects/attendance-master-code-old/#google-sheets","title":"Google Sheets","text":"<p>McRun Head Run Attendance (MASTER)</p>"},{"location":"projects/attendance-master-code-old/#apps-script-project","title":"Apps Script project","text":"<p>Attendance Code (MASTER)</p>"},{"location":"projects/attendance-master-code-old/#documentation","title":"Documentation","text":""},{"location":"projects/attendance-master-code-old/#functions","title":"Functions","text":""},{"location":"projects/attendance-master-code-old/#data-formattinggs","title":"Data-Formatting.gs","text":"<ul> <li>getLastSubmission_(): Returns the last non-empty row index in the master attendance sheet.</li> <li>formatNamesInRow_(targetCols, startRow, numRow): Formats names in specified columns and rows, separating names by newlines.</li> <li>formatAllNamesInRow(): Formats all relevant name columns (headrunners and attendees) in the last submission row.</li> </ul>"},{"location":"projects/attendance-master-code-old/#view-formattinggs","title":"View-Formatting.gs","text":"<ul> <li>sortAttendanceForm(): Sorts the master attendance sheet by timestamp (ascending).</li> <li>prettifySheet(): Applies formatting to the master attendance sheet for improved readability.</li> <li>formatSpecificColumns_(): Applies font, alignment, number format, and column width settings to key columns.</li> </ul>"},{"location":"projects/attendance-master-code-old/#transfergs","title":"Transfer.gs","text":"<ul> <li>onChange(e): Triggered on sheet changes; handles new submissions, exports, and maintenance formatting.</li> <li>transferToSemesterSheet(row): Transfers the latest submission to the semester attendance sheet and marks it as exported.</li> <li>prepareAttendanceSubmission(values): Converts a row of attendance data into a JSON-formatted string for export.</li> </ul>"},{"location":"projects/attendance-master-code-old/#variablesgs","title":"Variables.gs","text":"<ul> <li>getUserTimeZone_(): Returns the script's timezone as a string (e.g., 'America/Montreal').</li> </ul>"},{"location":"projects/attendance-master-code-old/#example-usage","title":"Example Usage","text":""},{"location":"projects/attendance-master-code-old/#format-names-in-last-row","title":"Format Names in Last Row","text":"<pre><code>formatNamesInRow_([COLUMN_MAP.ATTENDEES]);\n</code></pre>"},{"location":"projects/attendance-master-code-old/#format-names-in-specific-row-and-columns","title":"Format Names in Specific Row and Columns","text":"<pre><code>formatNamesInRow_([COLUMN_MAP.HEADRUNNERS, COLUMN_MAP.ATTENDEES], 7);\n</code></pre>"},{"location":"projects/attendance-master-code-old/#sort-attendance-sheet-by-timestamp","title":"Sort Attendance Sheet by Timestamp","text":"<pre><code>sortAttendanceForm();\n</code></pre>"},{"location":"projects/attendance-master-code-old/#export-latest-submission-to-semester-sheet","title":"Export Latest Submission to Semester Sheet","text":"<pre><code>transferToSemesterSheet();\n</code></pre>"},{"location":"projects/attendance-master-code-old/#get-last-submission-row","title":"Get Last Submission Row","text":"<pre><code>const lastRow = getLastSubmission_();\n</code></pre>"},{"location":"projects/attendance-master-code-old/#triggers","title":"Triggers","text":"<ul> <li>The <code>onChange</code> function should be set as an installable trigger for the master attendance sheet to automate exports and formatting.</li> </ul>"},{"location":"projects/attendance-master-code-old/#author","title":"Author","text":"<ul> <li>Andrey Gonzalez</li> </ul>"},{"location":"projects/attendance-master-code/","title":"McRUN Master Attendance","text":""},{"location":"projects/attendance-master-code/#about","title":"About","text":"<p>The McRUN Master Attendance project manages and automates the process of tracking head run attendance for the McGill Students Running Club.</p> <p>It leverages Google Apps Script with Google Sheets to provide a seamless, automated workflow for importing, formatting, and exporting attendance data between the master sheet and semester sheets.</p>"},{"location":"projects/attendance-master-code/#files","title":"Files","text":"<ul> <li>Github Repo: mcrun-master-attendance</li> <li>Google Sheets: McRUN Master Attendance Sheet</li> <li>Apps Script Project: Master Attendance Apps Script (Accessible via Extensions &gt; Apps Script in the Google Sheet)</li> </ul>"},{"location":"projects/attendance-master-code/#purpose","title":"Purpose","text":"<ul> <li>Ensure all head run attendance is reliably recorded, formatted, and transferred.</li> <li>Automate data cleaning and formatting for clarity and reporting.</li> <li>Integrate with semester attendance sheets for historical and analytics purposes.</li> </ul>"},{"location":"projects/attendance-master-code/#key-features","title":"Key Features","text":"<ul> <li>Automated transfer of new submissions to semester sheets.</li> <li>Data formatting for names, timestamps, and event details.</li> <li>Consistent column formatting (e.g., font, size, alignment, checkboxes).</li> <li>Trigger-based automation on sheet edits.</li> <li>Error handling/logging for safe operation.</li> <li>Timezone correctness for all date operations.</li> </ul>"},{"location":"projects/attendance-master-code/#tools-used","title":"Tools Used","text":"<ul> <li>Google Apps Script (JavaScript)</li> <li>Google Sheets</li> <li>Google Sheets Triggers (onChange)</li> <li>Custom formatting and transfer functions</li> </ul>"},{"location":"projects/attendance-master-code/#function-docs","title":"Function Docs","text":"<p>This section is divided by project file (alphabetical order). Each file lists its functions and provides a detailed reference for each.</p> <p>Note: Only a selection of functions may be shown below due to search result limits. See all code/functions in GitHub</p>"},{"location":"projects/attendance-master-code/#data-formattinggs","title":"#  Data-Formatting.gs","text":"<ul> <li><code>getLastSubmission()</code> \u2192 Gets the last non-empty row in the sheet</li> <li><code>formatNamesInRow(targetCols, startRow, numRow)</code> \u2192 Formats and normalizes names in specific columns/rows</li> </ul>"},{"location":"projects/attendance-master-code/#getlastsubmission","title":"##  getLastSubmission()","text":"<p>Finds the row index of the last non-empty submission (by timestamp) in the master attendance sheet.</p> <pre><code>const idx = getLastSubmission();\n</code></pre> Name Type Description \u2014 \u2014 No parameters <p>Output: Number (1-based index of last non-empty row)</p> <p>Pitfalls: If all rows are empty, may return 0 or error.</p>"},{"location":"projects/attendance-master-code/#formatnamesinrowtargetcols-startrow-numrow","title":"##  formatNamesInRow(targetCols, startRow, numRow)","text":"<p>Formats headrunner or attendee names in the specified columns for a given row or range, normalizing apostrophes and splitting by commas/newline.</p> <pre><code>formatNamesInRow([2, 7], 7, 1);\n</code></pre> Name Type Description targetCols Array Columns to format startRow Integer Row to start formatting (default: last row) numRow Integer Number of rows to format (default: 1) <p>Output: None (in-place formatting in sheet)</p> <p>Pitfalls: Out-of-range columns/rows may cause errors.</p> <p></p>"},{"location":"projects/attendance-master-code/#transfergs","title":"#  Transfer.gs","text":"<ul> <li><code>onChange(e)</code> \u2192 Main trigger handler for sheet edits/changes</li> <li><code>transferToSemesterSheet(row)</code> \u2192 Transfers the latest submission to the semester sheet</li> </ul>"},{"location":"projects/attendance-master-code/#onchangee","title":"##  onChange(e)","text":"<p>Handles all sheet onChange events. Transfers new submissions to the semester sheet and triggers formatting.</p> <pre><code>function onChange(e) {\n  // Called automatically by trigger\n}\n</code></pre> Name Type Description e Object Sheets event object <p>Output: None (side effects: transfers data, runs formatting)</p> <p>Pitfalls: Only processes EDIT events and correct sheet ID; errors logged.</p>"},{"location":"projects/attendance-master-code/#transfertosemestersheetrow","title":"##  transferToSemesterSheet(row)","text":"<p>Transfers the latest submission (or specified row) to the semester attendance sheet, marking it as exported.</p> <pre><code>transferToSemesterSheet(5);\n</code></pre> Name Type Description row Integer Row to transfer (default: last submission) <p>Output: None</p> <p>Pitfalls: Requires valid sheet IDs and permissions; falls back to direct access if library fails.</p> <p></p>"},{"location":"projects/attendance-master-code/#variablesgs","title":"#  Variables.gs","text":"<ul> <li><code>getUserTimeZone()</code> \u2192 Gets the script's timezone</li> </ul>"},{"location":"projects/attendance-master-code/#getusertimezone","title":"##  getUserTimeZone()","text":"<p>Returns the timezone for the script as a geographical location string.</p> <pre><code>const tz = getUserTimeZone();\n</code></pre> Name Type Description \u2014 \u2014 No parameters <p>Output: String (timezone, e.g., 'America/Montreal')</p> <p>Pitfalls: None</p> <p></p>"},{"location":"projects/attendance-master-code/#view-formattinggs","title":"#  View-Formatting.gs","text":"<ul> <li><code>sortAttendanceForm()</code> \u2192 Sorts sheet by timestamp ascending</li> <li><code>prettifySheet()</code> \u2192 Calls column formatting function</li> <li><code>formatSpecificColumns()</code> \u2192 Applies formatting to key columns</li> </ul>"},{"location":"projects/attendance-master-code/#sortattendanceform","title":"##  sortAttendanceForm()","text":"<p>Sorts all rows (except the header) by the Timestamp column in ascending order.</p> <pre><code>sortAttendanceForm();\n</code></pre> Name Type Description \u2014 \u2014 No parameters <p>Output: None (sorts in-place)</p> <p>Pitfalls: Assumes Timestamp is in COLUMN_MAP.TIMESTAMP.</p>"},{"location":"projects/attendance-master-code/#prettifysheet","title":"##  prettifySheet()","text":"<p>Applies master formatting to the sheet for better readability.</p> <pre><code>prettifySheet();\n</code></pre> <p>Output: None</p>"},{"location":"projects/attendance-master-code/#formatspecificcolumns","title":"##  formatSpecificColumns()","text":"<p>Applies font, size, bold, italics, number format, alignment, and checkboxes to specific columns.</p> <pre><code>formatSpecificColumns();\n</code></pre> <p>Output: None</p> <p>Pitfalls: Hardcoded ranges; will fail if columns/names change.</p>"},{"location":"projects/attendance-master-code/#triggers","title":"Triggers","text":""},{"location":"projects/attendance-master-code/#onchange-trigger","title":"onChange Trigger","text":"<ul> <li>Type: <code>onChange</code></li> <li>Function: <code>onChange(e)</code></li> <li>Purpose: Runs automatically on any edit/change to the master attendance sheet.<ul> <li>Transfers new submissions to the semester sheet.</li> <li>Runs formatting and maintenance functions.</li> <li>Ensures all data is up-to-date and formatted after every change.</li> </ul> </li> </ul>"},{"location":"projects/attendance-master-code/#manualcustom-triggers","title":"Manual/Custom Triggers","text":"<ul> <li>Functions like <code>sortAttendanceForm()</code> and <code>prettifySheet()</code> can be run manually from the Apps Script UI for maintenance or troubleshooting.</li> </ul>"},{"location":"projects/attendance-master-code/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"Issue/Error Likely Cause Solution \"Early exit due to invalid e.changeType\" Triggered on wrong event type Only EDIT events are processed \"thisSource is not defined\" Event object is missing source Check Apps Script trigger setup \"Cannot get property 'getRange' of null\" Wrong sheet ID or sheet deleted Check values in Variables.gs \"No rows transferred\" No new submissions or all rows empty Verify data is submitted and not empty Formatting is off Sheet structure has changed Update column indices and formatting ranges"},{"location":"projects/attendance-master-code/#see-also","title":"See Also","text":"<ul> <li>mcrun-attendance \u2014 Semester attendance system</li> <li>mcrun-membership-list \u2014 Membership management</li> <li>Google Apps Script Triggers</li> <li>Google Sheets API</li> <li>McRUN Club GitHub</li> </ul> <p>Last updated: 2025-06-12</p>"},{"location":"projects/attendance-semester-code/","title":"McRUN Attendance Documentation","text":""},{"location":"projects/attendance-semester-code/#about","title":"About","text":"<p>Welcome to the McRUN Attendance codebase documentation. This project is a Google Apps Script-based solution designed to streamline attendance tracking for the McRUN club. It integrates with Google Sheets, Google Forms, and external tools to automate attendance submissions, formatting, and reporting. </p> <p>The system also includes features for email notifications, data validation, and integration with the Points Ledger for tracking participation.</p>"},{"location":"projects/attendance-semester-code/#files","title":"Files","text":"<ul> <li>Github Repo: mcrun-attendance</li> <li>Google Sheets: Head Run Attendance - 2024-25</li> <li>Apps Script Project: Attendance Code 2024/25 (Accessible via Extensions &gt; Apps Script in the Google Sheet)</li> </ul>"},{"location":"projects/attendance-semester-code/#key-features","title":"Key Features","text":"<ul> <li>Attendance Management: Automates the processing of attendance submissions from Google Forms and the McRUN app.</li> <li>Data Formatting: Ensures uniform formatting of names, headruns, and other attendance details.</li> <li>Email Notifications: Sends reminders and attendance copies to headrunners and club executives.</li> <li>Integration with Points Ledger: Transfers attendance data to a Points Ledger for tracking participation.</li> <li>Custom Menus: Provides a user-friendly interface in Google Sheets for executing scripts.</li> <li>Triggers and Scheduling: Automates tasks like checking for missing attendance and updating calendar-based triggers.</li> </ul> <p>Note: This documentation is generated from a code search and may not include every function in the repository. View all code on GitHub</p>"},{"location":"projects/attendance-semester-code/#function-docs","title":"Function Docs","text":"<p>This section provides a quick reference to all functions in the McRUN Attendance codebase. Click on a function name to jump to its detailed documentation.</p>"},{"location":"projects/attendance-semester-code/#formattinggs","title":"#  Formatting.gs","text":"<ul> <li><code>addMissingPlatform()</code></li> <li><code>toTitleCase()</code> </li> <li><code>cleanSheetData()</code></li> <li><code>formatAllHeadRun()</code> </li> <li><code>formatAllConfirmations()</code> </li> <li><code>formatConfirmationInRow()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#addmissingplatform","title":"##  addMissingPlatform()","text":"<p>Adds 'Google Form' as a platform source for a row.</p> <pre><code>addMissingPlatform(7);\n</code></pre> Name Type Description row Integer Row in attendance sheet (defaults to <code>ATTENDANCE_SHEET.getLastRow())</code>)"},{"location":"projects/attendance-semester-code/#totitlecase","title":"##  toTitleCase()","text":"<p>Converts a string to title case.</p> <pre><code>toTitleCase(\"hello world\");\n</code></pre> Name Type Description inputString String The string to title <p>Output: String</p>"},{"location":"projects/attendance-semester-code/#cleansheetdata","title":"##  cleanSheetData()","text":"<p>Runs all formatting functions for the sheet.</p> <pre><code>cleanSheetData();\n</code></pre>"},{"location":"projects/attendance-semester-code/#formatallheadrun","title":"##  formatAllHeadRun()","text":"<p>Formats all headrun entries in the sheet.</p> <pre><code>formatAllHeadRun();\n</code></pre>"},{"location":"projects/attendance-semester-code/#formatallconfirmations","title":"##  formatAllConfirmations()","text":"<p>Formats all confirmation columns in the sheet.</p> <pre><code>formatAllConfirmations();\n</code></pre>"},{"location":"projects/attendance-semester-code/#formatconfirmationinrowrow","title":"##  formatConfirmationInRow(row)","text":"<p>Formats confirmation as a user-friendly string.</p> <pre><code>formatConfirmationInRow(10);\n</code></pre> Name Type Description <code>row</code> <code>Integer</code> Row in attendance sheet. Default: <code>ATTENDANCE_SHEET.getLastRow()</code>"},{"location":"projects/attendance-semester-code/#headrun-attendancegs","title":"#  HeadRun-Attendance.gs","text":"<ul> <li><code>onFormSubmission()</code> </li> <li><code>onFormSubmissionInRow()</code> </li> <li><code>onAppSubmission()</code> </li> <li><code>bulkFormatting()</code> </li> <li><code>transferAndFormat()</code> </li> <li><code>getLastSubmission()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#onformsubmission","title":"##  onFormSubmission()","text":"<p>Runs after form submission; sorts, processes, transfers, and formats the new entry.</p> <pre><code>onFormSubmission();\n</code></pre>"},{"location":"projects/attendance-semester-code/#onformsubmissioninrow","title":"##  onFormSubmissionInRow()","text":"<p>Executes post-form-submission logic for a specific row.</p> <pre><code>onFormSubmissionInRow(15);\n</code></pre> Name Type Description row Integer Row in attendance sheet (1-index)"},{"location":"projects/attendance-semester-code/#onappsubmission","title":"##  onAppSubmission()","text":"<p>Processes app-based attendance submissions.</p> <pre><code>onAppSubmission(22);\n</code></pre> Name Type Description row Integer Row in attendance sheet (1-index). Defaults to <code>ATTENDANCE_SHEET.getLastRow()</code>"},{"location":"projects/attendance-semester-code/#bulkformatting","title":"##  bulkFormatting()","text":"<p>Bulk-formats a row: confirmation and names.</p> <pre><code>bulkFormatting(7);\n</code></pre> Name Type Description row Integer Row in attendance sheet"},{"location":"projects/attendance-semester-code/#transferandformat","title":"##  transferAndFormat()","text":"<p>Transfers a row to the Points Ledger, triggers formatting.</p> <pre><code>transferAndFormat(7);\n</code></pre> Name Type Description row Integer Row in attendance sheet"},{"location":"projects/attendance-semester-code/#getlastsubmission","title":"##  getLastSubmission()","text":"<p>Finds the last non-empty row in the attendance sheet.</p> <pre><code>getLastSubmission();\n</code></pre> Name Type Description sheet Sheet (Optional) Target sheet object. Defaults to <code>GET_ATTENDANCE_SHEET()</code> <p>Output: Integer (1-indexed row number)</p> <p></p>"},{"location":"projects/attendance-semester-code/#headrun-infogs","title":"#  Headrun-Info.gs","text":"<ul> <li><code>storeObject(key, obj)</code> -&gt; Stores object in GAS document properties.</li> <li><code>getAllHeadruns()</code></li> <li><code>getAllHeadrunners()</code></li> <li><code>getWeekday()</code> </li> <li><code>getScheduleFromStore()</code> </li> <li><code>getMatchedTimeKey()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#storeobject","title":"##  storeObject()","text":"<p>Stores <code>obj</code> in the document properties under <code>key</code>.</p> <pre><code>storeObject('headrunners', {...});\n</code></pre> Name Type Description key String Property key obj Object Object to store"},{"location":"projects/attendance-semester-code/#getallheadruns","title":"##  getAllHeadruns()","text":"<p>Returns all stored headruns.</p> <pre><code>getAllHeadruns();\n</code></pre>"},{"location":"projects/attendance-semester-code/#getallheadrunners","title":"##  getAllHeadrunners()","text":"<p>Returns all stored headrunners.</p> <pre><code>getAllHeadrunners();\n</code></pre>"},{"location":"projects/attendance-semester-code/#getweekday","title":"##  getWeekday()","text":"<p>Returns day string for the given index.</p> <pre><code>getWeekday(2); // returns 'tuesday'\n</code></pre> Name Type Description weekdayIndex Integer 0=Sunday, 6=Saturday"},{"location":"projects/attendance-semester-code/#getschedulefromstore","title":"##  getScheduleFromStore()","text":"<p>Returns run schedule for the specified weekday.</p> <pre><code>getScheduleFromStore('monday');\n</code></pre> Name Type Description currentWeekday String Int"},{"location":"projects/attendance-semester-code/#getmatchedtimekey","title":"##  getMatchedTimeKey()","text":"<p>Finds the time key in runSchedule matching submission time \u00b1 offset.</p> <pre><code>getMatchedTimeKey(new Date(), scheduleObj, 2);\n</code></pre> Name Type Description submissionDate Date Date of the submission runSchedule Object Schedule object offsetHours Integer Offset window in hours (default <code>2</code>)"},{"location":"projects/attendance-semester-code/#importgs","title":"#  Import.gs","text":"<ul> <li><code>processImportFromApp(importObj)</code></li> <li><code>transferLastImport()</code></li> <li><code>transferThisRow()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#processimportfromappimportobj","title":"##  processImportFromApp(importObj)","text":"<p>Processes the latest attendance submission imported via the McRUN app. Verifies if the import is JSON or multi-column, appends to the import sheet, processes and transfers to semester sheet, and triggers post-import logic.</p> <pre><code>processImportFromApp('{\"timestamp\":\"2025-05-25T13:00:00Z\", ...}');\n</code></pre> Name Type Description importObj String (JSON) JSON string of the attendance submission <p>Output: None (side effects: rows added, triggers post-import) Pitfalls: Import must be a valid JSON string; malformed data will throw.  </p>"},{"location":"projects/attendance-semester-code/#transferlastimport","title":"##  transferLastImport()","text":"<p>Transfers the last imported attendance submission (from Import Sheet) to the semester sheet.</p> <pre><code>transferLastImport();\n</code></pre> Name Type Description \u2014 \u2014 No parameters <p>Output: None (side effects: submission transferred) Pitfalls: Only for use with valid import rows.</p>"},{"location":"projects/attendance-semester-code/#transferthisrowrow","title":"##  transferThisRow(row)","text":"<p>Helper to transfer a specific row from the import sheet to the semester sheet.</p> <pre><code>transferThisRow(5);\n</code></pre> Name Type Description row Integer The row number in the import sheet to process <p>Output: None. Pitfalls: Row must contain valid JSON string.</p> <p></p>"},{"location":"projects/attendance-semester-code/#points-ledgergs","title":"#  Points-Ledger.gs","text":"<ul> <li>appendMemberEmail(row, registered, unregistered) -&gt; Appends member emails to attendee names in a row.</li> <li><code>transferSubmissionToLedger(row)</code> -&gt; Transfers a submission to the Points Ledger.</li> </ul>"},{"location":"projects/attendance-semester-code/#appendmemberemail","title":"##  appendMemberEmail()","text":"<p>Appends member emails to attendee names in a row.</p> <pre><code>appendMemberEmail(5, registeredArr, unregisteredArr);\n</code></pre> Name Type Description <code>row</code> <code>Integer</code> Row in attendance sheet <code>registered</code> <code>String[][]</code> Registered attendees/emails <code>unregistered</code> <code>String[][]</code> Unregistered attendees"},{"location":"projects/attendance-semester-code/#transfersubmissiontoledger","title":"##  transferSubmissionToLedger()","text":"<p>Transfers a submission to the Points Ledger.</p> <pre><code>transferSubmissionToLedger(12);\n</code></pre> Name Type Description row Integer Row in attendance sheet (default: <code>getLastSubmission()</code>) <p></p>"},{"location":"projects/attendance-semester-code/#triggersgs","title":"#  Triggers.gs","text":"<ul> <li><code>updateWeeklyCalendarTriggers()</code> </li> <li><code>addSingleEventTrigger()</code> </li> <li><code>createDailyAttendanceTrigger()</code> </li> <li><code>getStartOfDay()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#updateweeklycalendartriggers","title":"##  updateWeeklyCalendarTriggers()","text":"<p>Adds/removes time-based triggers for events, ensures correct calendar is used.</p> <pre><code>updateWeeklyCalendarTriggers();\n</code></pre>"},{"location":"projects/attendance-semester-code/#addsingleeventtrigger","title":"##  addSingleEventTrigger()","text":"<p>Adds a trigger for all events today.</p> <pre><code>addSingleEventTrigger();\n</code></pre>"},{"location":"projects/attendance-semester-code/#createdailyattendancetrigger","title":"##  createDailyAttendanceTrigger()","text":"<p>Creates time-based triggers for all relevant events in the current week.</p> <pre><code>createDailyAttendanceTrigger();\n</code></pre>"},{"location":"projects/attendance-semester-code/#getstartofday","title":"##  getStartOfDay()","text":"<p>Returns start-of-day for a given date.</p> <pre><code>getStartOfDay(new Date());\n</code></pre> Name Type Description date Date The date object <p>Output: Date (start of the given day)</p> <p></p>"},{"location":"projects/attendance-semester-code/#unregisteredgs","title":"#  Unregistered.gs","text":"<ul> <li><code>getAllUnregisteredMembers()</code></li> <li><code>getUnregisteredMembersInRow()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#getallunregisteredmembers","title":"##  getAllUnregisteredMembers()","text":"<p>Runs the unregistered member check for all rows in the attendance sheet.</p> <pre><code>getAllUnregisteredMembers();\n</code></pre> Name Type Description \u2014 \u2014 No parameters"},{"location":"projects/attendance-semester-code/#getunregisteredmembersinrowrow","title":"##  getUnregisteredMembersInRow(row)","text":"<p>Finds attendees in a specific row who are unregistered, sets in the NOT_FOUND_COL, and appends emails to registered attendees.</p> <pre><code>getUnregisteredMembersInRow(10);\n</code></pre> Name Type Description row Integer Row in the attendance sheet (1-indexed). Default: <code>ATTENDANCE_SHEET.getLastRow()</code> <p>Output: None; side effects on sheet.</p> <p></p>"},{"location":"projects/attendance-semester-code/#user-menugs","title":"#  User-Menu.gs","text":"<ul> <li><code>logMenuAttempt()</code></li> <li><code>onOpen()</code></li> <li><code>helpUI()</code></li> </ul>"},{"location":"projects/attendance-semester-code/#logmenuattempt","title":"##  logMenuAttempt()","text":"<p>Logs a user's attempt to use the custom menu.</p> <pre><code>logMenuAttempt(\"someone@mail.com\");\n</code></pre> Name Type Description email String Email address of the active user. Defaults to empty string."},{"location":"projects/attendance-semester-code/#onopen","title":"##  onOpen()","text":"<p>Creates the custom menu in the spreadsheet UI.</p> <pre><code>onOpen();\n</code></pre>"},{"location":"projects/attendance-semester-code/#helpui","title":"##  helpUI()","text":"<p>Displays a help message for the custom menu.</p> <pre><code>helpUI();\n</code></pre> <p></p>"},{"location":"projects/attendance-semester-code/#triggers","title":"Triggers","text":"<ol> <li>Form Submission: Set up a trigger for <code>onFormSubmission</code> (From form).</li> <li>App Submission: Set up a trigger for <code>onAppSubmission</code> (From event or manual).</li> <li>Scheduled Checks:</li> <li>Use time-driven triggers (e.g., weekly, daily) for functions like <code>updateWeeklyCalendarTriggers</code>.</li> <li>Calendar event-based triggers for event-driven attendance checks.</li> </ol>"},{"location":"projects/attendance-semester-code/#troubleshooting","title":"Troubleshooting","text":""},{"location":"projects/attendance-semester-code/#common-issues","title":"Common Issues","text":"Issue/Error Cause Solution \"Exception: No permission\" Not authorized Ensure proper account and OAuth scopes \"Cannot read property 'getRange' of null\" Sheet name or ID is wrong Double-check constants in Attendance-Variables.gs \"Trigger not firing\" Trigger not set up Manually add the trigger in Apps Script UI \"Malformed JSON\" Import data is not valid JSON Validate data before import"},{"location":"projects/attendance-semester-code/#faq","title":"FAQ","text":"<p>Q: How do I add a new admin? A: Add their email to <code>PERM_USER_</code> in <code>User-Menu.gs</code>.</p> <p>Q: How do I change the active semester? A: Update <code>ATTENDANCE_SHEET_NAME</code> and related constants in <code>Attendance-Variables.gs</code>.</p> <p>Q: Where are attendance logs stored? A: In the Points Ledger Google Sheet (see constants).</p>"},{"location":"projects/attendance-semester-code/#see-also","title":"See also","text":"<ul> <li>Google Apps Script Triggers Documentation</li> <li>Google Sheets API</li> <li>Apps Script Properties Service</li> </ul>"},{"location":"projects/mcrace-code-old/","title":"McRUN Attendance Code","text":""},{"location":"projects/mcrace-code-old/#about","title":"About","text":"<p>The McRUN Attendance Code is a Google Apps Script-based solution designed to streamline attendance tracking for the McRUN club. It integrates with Google Sheets, Google Forms, and external tools to automate attendance submissions, formatting, and reporting. The system also includes features for email notifications, data validation, and integration with a Points Ledger for tracking participation.</p> <p>Key features:</p> <ul> <li>Attendance Management: Automates the processing of attendance submissions from Google Forms and the McRUN app.</li> <li>Data Formatting: Ensures uniform formatting of names, headruns, and other attendance details.</li> <li>Email Notifications: Sends reminders and attendance copies to headrunners and club executives.</li> <li>Integration with Points Ledger: Transfers attendance data to a Points Ledger for tracking participation.</li> <li>Custom Menus: Provides a user-friendly interface in Google Sheets for executing scripts.</li> <li>Triggers and Scheduling: Automates tasks like checking for missing attendance and updating calendar-based triggers.</li> </ul>"},{"location":"projects/mcrace-code-old/#files","title":"Files","text":""},{"location":"projects/mcrace-code-old/#github-repo-mcrace-code","title":"Github repo: mcrace-code","text":""},{"location":"projects/mcrace-code-old/#google-sheets-google-sheets","title":"Google Sheets: google sheets","text":""},{"location":"projects/mcrace-code-old/#example-usage","title":"Example Usage","text":""},{"location":"projects/mcrace-code-old/#automating-attendance-processing","title":"Automating Attendance Processing","text":"<pre><code>onFormSubmission(); // Automatically processes a new Google Form submission.\n</code></pre>"},{"location":"projects/mcrace-code-old/#formatting-data","title":"Formatting Data","text":"<pre><code>cleanSheetData(); // Formats all rows in the attendance sheet.\n</code></pre>"},{"location":"projects/mcrace-code-old/#sending-notifications","title":"Sending Notifications","text":"<pre><code>sendEmailReminder_({\n  emailsByLevel: { beginner: [\"headrunner@mail.com\"] },\n  headrunTitle: \"Monday 6pm\"\n});\n</code></pre>"},{"location":"projects/mcrace-code-old/#managing-triggers","title":"Managing Triggers","text":"<pre><code>updateWeeklyCalendarTriggers(); // Updates triggers for the upcoming week.\n</code></pre>"},{"location":"projects/mcrace-code-old/#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"projects/mcrace-code/","title":"McRUN Race Code","text":""},{"location":"projects/mcrace-code/#about","title":"About","text":"<p>McRUN Race Code is a Google Apps Script codebase that manages McGill Students Running Club (McRUN) race registrations, automates payment verification (online/Interac), and maintains robust data flows between Google Sheets and Gmail. It streamlines the process of receiving, validating, and formatting race registrations, integrating with email and payment platforms for automation and oversight.</p> <p>Purpose:</p> <ul> <li>Automate import, formatting, and verification of race registrations.</li> <li>Integrate payment confirmation (Zeffy, Stripe, Interac) with Gmail.</li> <li>Enable custom menu actions, triggers, and streamlined workflows for admins.</li> </ul>"},{"location":"projects/mcrace-code/#files","title":"Files","text":"<ul> <li>Github Repo: mcrace-code</li> <li>Google Sheets: McRUN Race Registrations Sheet</li> <li>Apps Script Project: McRUN Race Code Apps Script (Accessible via Extensions &gt; Apps Script in the Google Sheet)</li> </ul>"},{"location":"projects/mcrace-code/#key-features","title":"Key Features","text":"<ul> <li>Custom Google Sheets menu for admin workflows.</li> <li>Import and process race registrations (manual or triggered).</li> <li>Automated payment verification via Gmail (Zeffy, Stripe, Interac).</li> <li>Time-based and event-based triggers for payment and registration processing.</li> <li>Advanced formatting (checkboxes, banding, phone/date formats).</li> <li>Robust logging and error handling for all critical operations.</li> </ul>"},{"location":"projects/mcrace-code/#tools-used","title":"Tools Used","text":"<ul> <li>Google Apps Script (JavaScript)</li> <li>Google Sheets</li> <li>Gmail API (via Apps Script)</li> <li>Apps Script Triggers (time-based, onOpen, onChange)</li> <li>Zeffy/Stripe/Interac payment integration via email search</li> </ul>"},{"location":"projects/mcrace-code/#function-docs","title":"Function Docs","text":"<p>This section is divided by project file (alphabetical order). Each file lists its functions and provides a detailed reference for each.</p> <p>Note: Only a selection of functions may be shown below due to search result limits. See all code/functions in GitHub</p> <p></p>"},{"location":"projects/mcrace-code/#formattinggs","title":"#  Formatting.gs","text":"<ul> <li><code>removeDiacritics(str)</code> \u2192 Remove diacritics (accents) from a string</li> <li><code>formatSpecificColumns()</code> \u2192 Apply formatting to the registration sheet</li> </ul>"},{"location":"projects/mcrace-code/#removediacriticsstr","title":"##  removeDiacritics(str)","text":"<p>Removes diacritics (accents) from the given string.</p> <pre><code>const normalized = removeDiacritics(\"\u00c9lise\");\n</code></pre> Name Type Description str String Input string to format <p>Output: String (normalized, accents removed)</p>"},{"location":"projects/mcrace-code/#formatspecificcolumns","title":"##  formatSpecificColumns()","text":"<p>Applies formatting to the registration sheet: freezes panes, wraps text, sets alignment, phone/date formats, checkboxes, and banding.</p> <pre><code>formatSpecificColumns();\n</code></pre> <p>Output: None (side effect: formats the sheet)</p> <p>Pitfalls: Relies on sheet structure and column names.</p> <p></p>"},{"location":"projects/mcrace-code/#importgs","title":"#  Import.gs","text":"<ul> <li><code>appendToImport(reg)</code> \u2192 Append a registration to the import sheet</li> <li><code>processLastImport()</code> \u2192 Process the last imported registration</li> <li><code>onChange(e)</code> \u2192 Event handler for changes in the import sheet</li> </ul>"},{"location":"projects/mcrace-code/#appendtoimportreg","title":"##  appendToImport(reg)","text":"<p>Appends a registration object (stringified) to the import sheet.</p> <pre><code>const rowNum = appendToImport(JSON.stringify(regObj));\n</code></pre> Name Type Description reg String Registration data string <p>Output: Integer (row number where appended)</p> <p>Pitfalls: Import sheet must be accessible and not locked.</p>"},{"location":"projects/mcrace-code/#processlastimport","title":"##  processLastImport()","text":"<p>Processes the last imported registration (parsing, registering, formatting, payment check).</p> <pre><code>processLastImport();\n</code></pre> <p>Output: None</p> <p>Pitfalls: Throws if the target row is invalid or missing.</p>"},{"location":"projects/mcrace-code/#onchangee","title":"##  onChange(e)","text":"<p>Triggered when a change occurs in the spreadsheet; processes new imports when rows are inserted.</p> <pre><code>function onChange(e) {\n  // Triggered automatically\n}\n</code></pre> Name Type Description e Object Sheets event object <p>Output: None</p> <p>Pitfalls: Only processes 'INSERT_ROW' changes on the import sheet.</p> <p></p>"},{"location":"projects/mcrace-code/#inboxgs","title":"#  Inbox.gs","text":"<ul> <li><code>getGmailLabel(labelName)</code> \u2192 Retrieve a Gmail label by name</li> <li><code>getGmailSearchString(sender, offset)</code> \u2192 Build Gmail search string for sender/date</li> <li><code>cleanUpMatchedThread(thread, label)</code> \u2192 Archive, mark read, and label Gmail thread</li> </ul>"},{"location":"projects/mcrace-code/#getgmaillabellabelname","title":"##  getGmailLabel(labelName)","text":"<p>Retrieves a Gmail label object by its name.</p> <pre><code>const label = getGmailLabel(\"Fee Payments/Online Emails\");\n</code></pre> Name Type Description labelName String Name of the Gmail label <p>Output: GmailLabel</p> <p>Pitfalls: Throws if label does not exist.</p>"},{"location":"projects/mcrace-code/#getgmailsearchstringsender-offset","title":"##  getGmailSearchString(sender, offset)","text":"<p>Builds a Gmail search string for a sender and minimum date.</p> <pre><code>const search = getGmailSearchString(\"zeffy.com\", 7 * 24 * 60 * 60 * 1000);\n</code></pre> Name Type Description sender String Sender email address offset Integer Time offset in ms to calculate minimum search date <p>Output: String (Gmail search query)</p>"},{"location":"projects/mcrace-code/#cleanupmatchedthreadthread-label","title":"##  cleanUpMatchedThread(thread, label)","text":"<p>Marks a Gmail thread as read, archives it, and adds the provided label.</p> <pre><code>cleanUpMatchedThread(thread, label);\n</code></pre> Name Type Description thread GmailThread Gmail thread object label GmailLabel Gmail label object <p>Output: None</p> <p>Pitfalls: Throws if thread or label is invalid.</p> <p></p>"},{"location":"projects/mcrace-code/#menugs","title":"#  Menu.gs","text":"<ul> <li><code>onOpen()</code> \u2192 Add custom menu to the sheet</li> <li><code>helpUI()</code> \u2192 Show help message for menu</li> <li><code>confirmAndRunUserChoice(functionName, additionalMsg, funcArg)</code> \u2192 Confirm and run a user-selected menu function</li> </ul>"},{"location":"projects/mcrace-code/#onopen","title":"##  onOpen()","text":"<p>Creates a custom menu in the sheet UI for McRace admin actions.</p> <pre><code>onOpen();\n</code></pre> <p>Output: None</p>"},{"location":"projects/mcrace-code/#helpui","title":"##  helpUI()","text":"<p>Displays a help dialog with info on menu actions and contact.</p> <pre><code>helpUI();\n</code></pre> <p>Output: None</p>"},{"location":"projects/mcrace-code/#confirmandrunuserchoicefunctionname-additionalmsg-funcarg","title":"##  confirmAndRunUserChoice(functionName, additionalMsg, funcArg)","text":"<p>Displays a confirmation dialog and runs the selected function with an optional argument.</p> <pre><code>confirmAndRunUserChoice(\"formatSpecificColumns\", \"Format sheet?\", \"\");\n</code></pre> Name Type Description functionName String Name of function to execute additionalMsg String Custom message for confirmation (default: \"\") funcArg String Optional argument to pass (default: \"\") <p>Output: Return value of the executed function</p> <p></p>"},{"location":"projects/mcrace-code/#paymentgs","title":"#  Payment.gs","text":"<ul> <li><code>checkPayment(member)</code> \u2192 Check payment status for a member</li> <li><code>checkOnlinePayment(member)</code> \u2192 Check for online payment</li> <li><code>checkInteracPayment(member)</code> \u2192 Check for Interac payment</li> </ul>"},{"location":"projects/mcrace-code/#checkpaymentmember","title":"##  checkPayment(member)","text":"<p>Checks payment status for a member depending on their method.</p> <pre><code>const paid = checkPayment(memberObj);\n</code></pre> Name Type Description member Object Member info (name, email, paymentMethod) <p>Output: Boolean (true if paid)</p> <p>Pitfalls: Method must be known (\"CC\" or \"Interac\").</p>"},{"location":"projects/mcrace-code/#checkonlinepaymentmember","title":"##  checkOnlinePayment(member)","text":"<p>Checks for online payment (Zeffy, Stripe) via Gmail.</p> <pre><code>const hasPaid = checkOnlinePayment(memberObj);\n</code></pre> Name Type Description member Object Member info <p>Output: Boolean (true if payment found)</p>"},{"location":"projects/mcrace-code/#checkinteracpaymentmember","title":"##  checkInteracPayment(member)","text":"<p>Checks for Interac payment via Gmail.</p> <pre><code>const hasPaid = checkInteracPayment(memberObj);\n</code></pre> Name Type Description member Object Member info <p>Output: Boolean (true if payment found)</p> <p></p>"},{"location":"projects/mcrace-code/#registrationgs","title":"#  Registration.gs","text":"<ul> <li><code>getLastRowInReg()</code> \u2192 Get last non-empty registration row</li> <li><code>onNewRegistration({newRow, member})</code> \u2192 Process new registration</li> <li><code>addNewRegistration(registrationObj)</code> \u2192 Add new registration to sheet</li> </ul>"},{"location":"projects/mcrace-code/#getlastrowinreg","title":"##  getLastRowInReg()","text":"<p>Returns the last non-empty row in the registration sheet.</p> <pre><code>const lastRow = getLastRowInReg();\n</code></pre> <p>Output: Integer</p>"},{"location":"projects/mcrace-code/#onnewregistrationnewrow-member","title":"##  onNewRegistration({newRow, member})","text":"<p>Processes a new registration (extract payment, verify, format sheet).</p> <pre><code>onNewRegistration({ newRow: 25, member: memberArr });\n</code></pre> Name Type Description newRow Int Row where new data added member Array Formatted member data <p>Output: None</p>"},{"location":"projects/mcrace-code/#addnewregistrationregistrationobj","title":"##  addNewRegistration(registrationObj)","text":"<p>Formats and adds a new registration to the sheet. Returns the new row and member data.</p> <pre><code>const { newRow, member } = addNewRegistration(regObj);\n</code></pre> Name Type Description registrationObj Object Registration data <p>Output: Object <code>{ newRow, member }</code></p> <p></p>"},{"location":"projects/mcrace-code/#triggersgs","title":"#  Triggers.gs","text":"<ul> <li><code>createNewFeeTrigger(row, feeDetails)</code> \u2192 Create a time-based trigger for fee check</li> <li><code>runFeeChecker()</code> \u2192 Handler for time-based fee triggers</li> </ul>"},{"location":"projects/mcrace-code/#createnewfeetriggerrow-feedetails","title":"##  createNewFeeTrigger(row, feeDetails)","text":"<p>Creates a time-based trigger to check for a member\u2019s fee payment.</p> <pre><code>createNewFeeTrigger(23, { fullName: \"John Doe\", email: \"john@example.com\", paymentMethod: \"CC\" });\n</code></pre> Name Type Description row Int Registration row feeDetails Object Member's fee/payment info <p>Output: None</p> <p>Pitfalls: Only works if Script Properties are writable.</p>"},{"location":"projects/mcrace-code/#runfeechecker","title":"##  runFeeChecker()","text":"<p>Processes all fee check triggers, verifying payments and sending notifications as needed.</p> <pre><code>runFeeChecker();\n</code></pre> <p>Output: None</p> <p></p>"},{"location":"projects/mcrace-code/#variablesgs","title":"#  Variables.gs","text":"<ul> <li><code>getCurrentUserEmail()</code> \u2192 Returns current user\u2019s email</li> </ul>"},{"location":"projects/mcrace-code/#getcurrentuseremail","title":"##  getCurrentUserEmail()","text":"<p>Returns the email address of the current user executing the script.</p> <pre><code>const email = getCurrentUserEmail();\n</code></pre> <p>Output: String (email address)</p>"},{"location":"projects/mcrace-code/#triggers","title":"Triggers","text":""},{"location":"projects/mcrace-code/#types-of-triggers","title":"Types of Triggers","text":"<ul> <li>onOpen: Adds the custom admin menu for registrations and formatting.</li> <li>onChange: Processes new imports when rows are inserted (Import.gs).</li> <li>Time-based triggers: </li> <li>For fee/payment checking (Triggers.gs), periodically checking if payment has been received for a registration.</li> <li>Configured via <code>createNewFeeTrigger(row, feeDetails)</code>.</li> </ul> <p>Purpose: - Automates admin workflows, payment verification, and keeps the registration sheet up-to-date with minimal manual intervention.</p>"},{"location":"projects/mcrace-code/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"Issue/Error Likely Cause Solution \"Failed to retrieve Gmail label.\" Label does not exist Create label in Gmail \"Failed to append registration to import sheet.\" Sheet locked, invalid, or missing Check permissions and sheet names \"Payment not found\" Email not received or not matched Wait and retry; check sender and search terms \"Error cleaning up Gmail thread.\" Gmail API error Verify permissions, thread existence Formatting is off Sheet structure changed Update column indices and formatting logic"},{"location":"projects/mcrace-code/#see-also","title":"See Also","text":"<ul> <li>McRUN Attendance</li> <li>McRUN Points System</li> <li>Google Apps Script Triggers</li> <li>Google Sheets API</li> <li>McRUN Club GitHub</li> </ul> <p>Last updated: 2025-06-12</p>"},{"location":"projects/membership-list-code-old/","title":"Membership Registry","text":""},{"location":"projects/membership-list-code-old/#about","title":"About","text":"<p>This repository contains all Google Apps Script code used to manage the McRUN (McGill Students Running Club) membership list. It automates the registration process, membership fee verification, data consolidation, and communication with new members through integration with Google Sheets and Gmail.</p> <p>New members can register on Fillout</p> <p>Key Features:</p> <ul> <li>Automated registration form processing.</li> <li>Fee verification via email scraping and scheduled triggers.</li> <li>Consolidation of member data across semesters.</li> <li>Custom menu integration for Google Sheets.</li> <li>Automated communication with new members.</li> <li>Advanced formatting and data-cleaning utilities.</li> <li>Custom menu integration for Google Sheets.</li> <li>Automated communication with new members.</li> <li>Advanced formatting and data-cleaning utilities.</li> </ul>"},{"location":"projects/membership-list-code-old/#files","title":"Files","text":""},{"location":"projects/membership-list-code-old/#github-repo","title":"Github Repo","text":"<p>mcrunningclub/mcrun-membership-list</p>"},{"location":"projects/membership-list-code-old/#google-sheets","title":"Google Sheets","text":"<p>Our database uses Google Sheets to store all member registrations and related information. The MASTER sheet collects registrations across all semesters,     while registrations for individual semesters can be found in their     corresponding sheets. Memberships Collected (Main)</p>"},{"location":"projects/membership-list-code-old/#apps-script-project","title":"Apps Script project","text":"<p>Membership Registry Code</p> <p>Permissions: - Google Sheets: Edit access - Gmail: Read access (for payment verification) - Apps Script: Account (?) access, Create time-based triggers</p> <p>Running the script: - Ensure you are signed in with the correct Google account. - Most scripts run automatically on form submission or via custom menu in the Sheet. - Manual triggers can be run from the Apps Script editor if needed.</p> <p>File descriptions:</p> File name Description Semester Variables.gs Contains constants relating to various columns and sheets"},{"location":"projects/membership-list-code-old/#documentation","title":"Documentation","text":""},{"location":"projects/membership-list-code-old/#constants","title":"Constants","text":""},{"location":"projects/membership-list-code-old/#functions","title":"Functions","text":""},{"location":"projects/membership-list-code-old/#1-membership-registration-and-processing","title":"1. Membership Registration and Processing","text":""},{"location":"projects/membership-list-code-old/#onformsubmitnewrow-getlastsubmissioninmain","title":"<code>onFormSubmit(newRow = getLastSubmissionInMain())</code>","text":"<ul> <li>Description: Processes new registration: trims, formats, generates member ID, verifies payments, sends communications, and updates both <code>MAIN_SHEET</code> and <code>MASTER</code> sheets.</li> <li>Created: Oct 18, 2023</li> <li>Example: <pre><code>onFormSubmit(); // Handles latest submisson\n</code></pre></li> </ul>"},{"location":"projects/membership-list-code-old/#sendnewmembercommunicationsrow","title":"<code>sendNewMemberCommunications(row)</code>","text":"<ul> <li>Description: Packages and transfers new member info to a separate comms sheet.</li> <li>Created: Oct 18, 2023</li> </ul>"},{"location":"projects/membership-list-code-old/#getlastsubmissioninmain","title":"<code>getLastSubmissionInMain()</code>","text":"<ul> <li>Description: Returns the 1-indexed row of the last non-empty submission in <code>MAIN_SHEET</code>.</li> <li>Created: Sep 1, 2024  </li> <li>Updated: Dec 18, 2024</li> </ul>"},{"location":"projects/membership-list-code-old/#2-master-sheet-operations","title":"2. Master Sheet Operations","text":""},{"location":"projects/membership-list-code-old/#createmaster","title":"<code>createMaster()</code>","text":"<ul> <li>Description: Consolidates member data from semester sheets into the <code>MASTER</code> sheet.</li> <li>Created: Oct 23, 2024</li> </ul>"},{"location":"projects/membership-list-code-old/#addlastsubmissiontomasterlastrow-getlastsubmissioninmain","title":"<code>addLastSubmissionToMaster(lastRow = getLastSubmissionInMain())</code>","text":"<ul> <li>Description: Processes the last row of <code>MAIN_SHEET</code> and adds it to <code>MASTER</code>, then sorts by email.</li> <li>Created: Oct 23, 2024</li> </ul>"},{"location":"projects/membership-list-code-old/#addpaidsemestertohistorymemberrow-semestersheetname","title":"<code>addPaidSemesterToHistory(memberRow, semesterSheetName)</code>","text":"<ul> <li>Description: Appends the semester code to a member's payment history.</li> <li>Created &amp; Updated: Dec 17, 2024</li> </ul>"},{"location":"projects/membership-list-code-old/#3-fee-payment-and-triggers","title":"3. Fee Payment and Triggers","text":""},{"location":"projects/membership-list-code-old/#checkandsetpaymentrefrow-getlastsubmissioninmain","title":"<code>checkAndSetPaymentRef(row = getLastSubmissionInMain())</code>","text":"<ul> <li>Description: Verifies if a member has paid using email notifications; sets up a scheduled trigger if payment is not found.</li> <li>Created: Mar 16, 2025  </li> <li>Updated: May 20, 2025</li> </ul>"},{"location":"projects/membership-list-code-old/#createnewfeetrigger_row-feedetails","title":"<code>createNewFeeTrigger_(row, feeDetails)</code>","text":"<ul> <li>Description: Creates a new time-based trigger to check payment status repeatedly.</li> <li>Created &amp; Updated: May 20, 2025</li> </ul>"},{"location":"projects/membership-list-code-old/#runfeechecker","title":"<code>runFeeChecker()</code>","text":"<ul> <li>Description: Triggered function to check for payment confirmation and clean up if found.</li> <li>Created: May 20, 2025  </li> <li>Updated: May 26, 2025</li> </ul>"},{"location":"projects/membership-list-code-old/#4-sheet-formatting-and-utilities","title":"4. Sheet Formatting and Utilities","text":""},{"location":"projects/membership-list-code-old/#trimwhitespace_lastrow-main_sheetgetlastrow","title":"<code>trimWhitespace_(lastRow = MAIN_SHEET.getLastRow())</code>","text":"<ul> <li>Description: Trims whitespace from key columns in the given row of <code>MAIN_SHEET</code>.</li> <li>Created: Oct 17, 2023  </li> <li>Updated: Feb 5, 2025</li> </ul>"},{"location":"projects/membership-list-code-old/#removediacriticsstr","title":"<code>removeDiacritics(str)</code>","text":"<ul> <li>Description: Removes diacritical marks from a string (e.g., accents).</li> <li>Created: Mar 5, 2025  </li> <li>Updated: Mar 15, 2025</li> <li>Example: <pre><code>removeDiacritics(\"Jos\u00e9\"); // Outputs \"Jose\"\n</code></pre></li> </ul>"},{"location":"projects/membership-list-code-old/#sortmainbyname","title":"<code>sortMainByName()</code>","text":"<ul> <li>Description: Sorts <code>MAIN_SHEET</code> by first then last name.</li> <li>Created: Oct 1, 2023  </li> <li>Updated: Jan 11, 2025</li> </ul>"},{"location":"projects/membership-list-code-old/#5-transfer-and-import-scripts","title":"5. Transfer and Import Scripts","text":""},{"location":"projects/membership-list-code-old/#onchangee","title":"<code>onChange(e)</code>","text":"<ul> <li>Description: Handles changes in the spreadsheet (row insertions etc.) to automate imports and formatting.</li> <li>No explicit dates.</li> </ul>"},{"location":"projects/membership-list-code-old/#transferlastimport","title":"<code>transferLastImport()</code>","text":"<ul> <li>Description: Transfers the latest row from the import sheet.</li> <li>No explicit dates.</li> </ul>"},{"location":"projects/membership-list-code-old/#transferthisrow_row","title":"<code>transferThisRow_(row)</code>","text":"<ul> <li>Description: Helper to transfer a specific row from import to main.</li> <li>No explicit dates.</li> </ul>"},{"location":"projects/membership-list-code-old/#6-menu-and-ui-integration","title":"6. Menu and UI Integration","text":""},{"location":"projects/membership-list-code-old/#onopen","title":"<code>onOpen()</code>","text":"<ul> <li>Description: Adds a custom menu to Google Sheets for quick access to scripts.</li> <li>Created: Nov 21, 2024  </li> <li>Updated: Mar 1, 2025</li> </ul>"},{"location":"projects/membership-list-code-old/#logmenuattempt_email","title":"<code>logMenuAttempt_(email = \"\")</code>","text":"<ul> <li>Description: Logs attempts to use the custom menu.</li> <li>Created: Nov 21, 2024  </li> <li>Updated: Nov 22, 2024</li> </ul>"},{"location":"projects/membership-list-code-old/#changesheetview_sheetname","title":"<code>changeSheetView_(sheetName)</code>","text":"<ul> <li>Description: Activates a specific sheet in the spreadsheet.</li> <li>Created &amp; Updated: Nov 21, 2024</li> </ul>"},{"location":"projects/membership-list-code-old/#7-example-fee-verification-and-automation","title":"7. Example: Fee Verification and Automation","text":"<pre><code>// Check and set payment for the latest member\ncheckAndSetPaymentRef();\n\n// Schedule a trigger to recheck payment for a new member\ncreateNewFeeTrigger_(row, feeDetails);\n\n// Run the periodic fee checker (typically not called directly)\nrunFeeChecker();\n</code></pre>"},{"location":"projects/membership-list-code-old/#example-usage","title":"Example Usage","text":""},{"location":"projects/membership-list-code-old/#advanced-usage","title":"Advanced Usage","text":"<ul> <li>Custom menus are added through <code>onOpen</code>.</li> <li>Scheduled triggers are created for fee verifications using Google Apps Script Triggers.</li> <li>Email notifications for payment are parsed and verified via GmailApp.</li> <li>All scripts are intended for use within the Google Sheets UI.</li> </ul>"},{"location":"projects/membership-list-code-old/#troubleshooting","title":"Troubleshooting","text":""},{"location":"projects/membership-list-code-old/#faq","title":"FAQ","text":"<p>Q: Scripts aren\u2019t running or menu is missing? - Try reloading the Google Sheet. - Make sure you have authorized the Apps Script project (check for permission prompts).</p> <p>Q: Payment verification isn\u2019t working? - Ensure the Google account has access to the relevant Gmail inbox. - Check that triggers are set up correctly in Apps Script (Edit &gt; Current project's triggers).</p> <p>Q: How do I manually run a script? - Open the Apps Script editor, select the function, and click the Run button.</p> <p>For more help, see the GitHub Issues page.</p>"},{"location":"projects/membership-list-code/","title":"McRUN Membership List","text":""},{"location":"projects/membership-list-code/#about","title":"About","text":"<p>McRUN Membership List is a Google Apps Script codebase for managing the membership roster of the McGill Students Running Club.</p> <p>This project automates the collection, verification, and maintenance of member data, integrates with Google Sheets, Gmail, and automates registration, fee-tracking, and communication workflows. It is designed for efficient, accurate, and scalable club membership management.</p> <p>Purpose</p> <ul> <li>Centralize and automate member registration (including form and manual entry).</li> <li>Verify membership fee payments via email (Zeffy, Stripe, Interac).</li> <li>Synchronize semester and master sheets, ensuring consistent member history.</li> <li>Automate communications and reporting for new members.</li> </ul>"},{"location":"projects/membership-list-code/#files","title":"Files","text":"<ul> <li>Github Repo: mcrun-membership-list</li> <li>Google Sheets: McRUN Membership Sheet</li> <li>Apps Script Project: McRUN Membership Apps Script (Accessible via Extensions &gt; Apps Script in the Google Sheet)</li> </ul>"},{"location":"projects/membership-list-code/#key-features","title":"Key Features","text":"<ul> <li>Automated import from form and manual member registration.</li> <li>Fee verification and follow-up via Gmail/Inbox search.</li> <li>Custom Google Sheets menu for common admin workflows.</li> <li>Synchronization between semester and master membership lists.</li> <li>Time-based and event-based triggers for processing new members and payments.</li> <li>Communication automation for onboarding new members.</li> <li>Robust error handling and logging.</li> </ul>"},{"location":"projects/membership-list-code/#tools-used","title":"Tools Used","text":"<ul> <li>Google Apps Script (JavaScript)</li> <li>Google Sheets (multiple sheets: Main, Master, Import, Internal Fee Collection, etc.)</li> <li>Gmail API via Apps Script</li> <li>Apps Script Triggers (onChange, time-based, onOpen)</li> <li>Google Drive (waivers, attachments)</li> </ul>"},{"location":"projects/membership-list-code/#function-docs","title":"Function Docs","text":"<p>This section is divided by project file (alphabetical order). Each file lists its functions and provides a detailed reference for each.</p> <p>Note: Only a selection of functions may be shown below due to search result limits. See all code/functions in GitHub</p> <p></p>"},{"location":"projects/membership-list-code/#formattinggs","title":"#  Formatting.gs","text":"<ul> <li><code>trimWhitespace(lastRow)</code> \u2192 Trims whitespace from columns in last row</li> <li><code>removeDiacritics(str)</code> \u2192 Removes diacritics (accents) from a string</li> <li><code>sortMainByName()</code> \u2192 Sorts MAIN_SHEET by first and last name</li> </ul>"},{"location":"projects/membership-list-code/#trimwhitespacelastrow","title":"##  trimWhitespace(lastRow)","text":"<p>Trims whitespace from key columns in the last row of <code>MAIN_SHEET</code>.</p> <pre><code>trimWhitespace(23);\n</code></pre> Name Type Description lastRow Integer Row number to trim (default: last row) <p>Output: None (in-place formatting)</p> <p>Pitfalls: Assumes columns 3-9 are name/referral fields in MAIN_SHEET.</p>"},{"location":"projects/membership-list-code/#removediacriticsstr","title":"##  removeDiacritics(str)","text":"<p>Removes diacritics (accents) from a string, returning ASCII-only output.</p> <pre><code>const result = removeDiacritics(\"\u00c9lise\");\n</code></pre> Name Type Description str String Input string <p>Output: String (normalized, accents removed)</p>"},{"location":"projects/membership-list-code/#sortmainbyname","title":"##  sortMainByName()","text":"<p>Sorts the MAIN_SHEET by first name and then last name (columns 3, 4).</p> <pre><code>sortMainByName();\n</code></pre> <p>Output: None</p> <p></p>"},{"location":"projects/membership-list-code/#member-feegs","title":"#  Member Fee.gs","text":"<ul> <li><code>getPaymentItem(colIndex)</code> \u2192 Gets payment item from \"Internal Fee Collection\" sheet</li> <li><code>getGmailLabel(labelName)</code> \u2192 Retrieves a Gmail label by name</li> <li><code>checkAndSetPaymentRef(row)</code> \u2192 Verifies fee payment and schedules follow-up if needed</li> </ul>"},{"location":"projects/membership-list-code/#getpaymentitemcolindex","title":"##  getPaymentItem(colIndex)","text":"<p>Retrieves the fee payment item from a specific cell in \"Internal Fee Collection\".</p> <pre><code>const item = getPaymentItem('A3');\n</code></pre> Name Type Description colIndex String Cell reference <p>Output: String (cell value)</p>"},{"location":"projects/membership-list-code/#getgmaillabellabelname","title":"##  getGmailLabel(labelName)","text":"<p>Retrieves a Gmail label object by its name.</p> <pre><code>const label = getGmailLabel(\"Fee Payments/Online Emails\");\n</code></pre> Name Type Description labelName String Gmail label name <p>Output: GmailLabel</p>"},{"location":"projects/membership-list-code/#checkandsetpaymentrefrow","title":"##  checkAndSetPaymentRef(row)","text":"<p>Verifies whether a member's payment has been found in the inbox or waived; schedules a follow-up if not.</p> <pre><code>checkAndSetPaymentRef(22);\n</code></pre> Name Type Description row Integer Row in MAIN_SHEET (default: last submission) <p>Output: None</p> <p>Pitfalls: Creates trigger for follow-up if payment not found.</p> <p></p>"},{"location":"projects/membership-list-code/#membership-collectedgs","title":"#  Membership Collected.gs","text":"<ul> <li><code>onFormSubmit(newRow)</code> \u2192 Handles submission of a new registration form</li> <li><code>sendNewMemberCommunications(row)</code> \u2192 Sends onboarding comms to new member</li> <li><code>getLastSubmissionInMain()</code> \u2192 Gets index of last non-empty row</li> </ul>"},{"location":"projects/membership-list-code/#onformsubmitnewrow","title":"##  onFormSubmit(newRow)","text":"<p>Processes a new member's registration: trims, formats, verifies payment, adds to master, and sends communications.</p> <pre><code>onFormSubmit(23);\n</code></pre> Name Type Description newRow Int Row number (default: last submission) <p>Output: None</p>"},{"location":"projects/membership-list-code/#sendnewmembercommunicationsrow","title":"##  sendNewMemberCommunications(row)","text":"<p>Packages and transfers new member info to \"NewMemberComms\" sheet.</p> <pre><code>sendNewMemberCommunications(23);\n</code></pre> Name Type Description row Int Row in MAIN_SHEET <p>Output: None</p>"},{"location":"projects/membership-list-code/#getlastsubmissioninmain","title":"##  getLastSubmissionInMain()","text":"<p>Returns index (1-based) of the last filled row in MAIN_SHEET.</p> <pre><code>const idx = getLastSubmissionInMain();\n</code></pre> <p>Output: Int (row index)</p> <p></p>"},{"location":"projects/membership-list-code/#triggersgs","title":"#  Triggers.gs","text":"<ul> <li><code>createNewFeeTrigger(row, feeDetails)</code> \u2192 Creates a time-based trigger for payment follow-up</li> <li><code>runFeeChecker()</code> \u2192 Checks all active fee-check triggers and updates sheet</li> </ul>"},{"location":"projects/membership-list-code/#createnewfeetriggerrow-feedetails","title":"##  createNewFeeTrigger(row, feeDetails)","text":"<p>Creates a scheduled time-based trigger to check a member's payment status.</p> <pre><code>createNewFeeTrigger(22, {memberName: \"Elise Dubois\", email: \"elise@ex.com\"});\n</code></pre> Name Type Description row Int Row number in sheet feeDetails Object Details for fee checking <p>Output: None</p>"},{"location":"projects/membership-list-code/#runfeechecker","title":"##  runFeeChecker()","text":"<p>Processes all fee check triggers: finds payments, updates sheet, or schedules further action.</p> <pre><code>runFeeChecker();\n</code></pre> <p>Output: None</p> <p></p>"},{"location":"projects/membership-list-code/#transfer-scriptsgs","title":"#  Transfer Scripts.gs","text":"<ul> <li><code>onChange(e)</code> \u2192 Handles new registration imports and master updates</li> <li><code>transferLastImport()</code> \u2192 Transfers latest Import row to main sheet</li> <li><code>transferThisRow(row)</code> \u2192 Transfers specific Import row to main sheet</li> </ul>"},{"location":"projects/membership-list-code/#onchangee","title":"##  onChange(e)","text":"<p>Event handler for spreadsheet changes: processes new Import entries and master updates.</p> <pre><code>function onChange(e) {\n  // Triggered automatically\n}\n</code></pre> Name Type Description e Object Sheets event object <p>Output: None</p>"},{"location":"projects/membership-list-code/#transferlastimport","title":"##  transferLastImport()","text":"<p>Transfers the last Import sheet row to the main sheet and processes as new member.</p> <pre><code>transferLastImport();\n</code></pre> <p>Output: None</p>"},{"location":"projects/membership-list-code/#transferthisrowrow","title":"##  transferThisRow(row)","text":"<p>Transfers a specific Import row to main sheet and processes as new member.</p> <pre><code>transferThisRow(14);\n</code></pre> Name Type Description row Int Row number in Import <p>Output: None</p> <p></p>"},{"location":"projects/membership-list-code/#user-menugs","title":"#  User Menu.gs","text":"<ul> <li><code>onOpen()</code> \u2192 Adds custom menu to Sheet UI</li> <li><code>logMenuAttempt(email)</code> \u2192 Logs user attempting to use menu</li> <li><code>changeSheetView(sheetName)</code> \u2192 Activates a specified sheet</li> </ul>"},{"location":"projects/membership-list-code/#onopen","title":"##  onOpen()","text":"<p>Adds the custom McRUN menu to the sheet UI.</p> <pre><code>onOpen();\n</code></pre> <p>Output: None</p>"},{"location":"projects/membership-list-code/#logmenuattemptemail","title":"##  logMenuAttempt(email)","text":"<p>Logs an attempt to use the menu by a user.</p> <pre><code>logMenuAttempt(\"admin@mcgill.ca\");\n</code></pre> Name Type Description email String User email (default: current user) <p>Output: None</p>"},{"location":"projects/membership-list-code/#changesheetviewsheetname","title":"##  changeSheetView(sheetName)","text":"<p>Activates the specified sheet in the current spreadsheet.</p> <pre><code>changeSheetView(\"Winter 2025\");\n</code></pre> Name Type Description sheetName String Name of the sheet <p>Output: None</p>"},{"location":"projects/membership-list-code/#triggers","title":"Triggers","text":""},{"location":"projects/membership-list-code/#types-of-triggers","title":"Types of Triggers","text":"<ul> <li>onChange: </li> <li>Handles new registration import, master updates, and triggers member processing.</li> <li>Time-based triggers: </li> <li>For periodic fee/payment checking; created as needed for follow-up.</li> <li>onOpen: </li> <li>Adds the custom admin menu for member management.</li> </ul> <p>Purpose: - Ensures all new members are processed, formatted, verified, and onboarded automatically. - Follows up on outstanding fee payments.</p>"},{"location":"projects/membership-list-code/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"Issue/Error Likely Cause Solution \"Missing required fields\" Registration data not validated Ensure all required fields are present in import \"Unauthorized\" Wrong or missing API key Ensure correct API key when using web endpoints \"Failed to find payment\" Payment email not found Wait for payment notification or check search terms \"Label does not exist\" Gmail label missing Create Gmail label manually \"Script error during onFormSubmit\" Data/range not found or sheet structure changed Check sheet structure, update code if needed"},{"location":"projects/membership-list-code/#see-also","title":"See Also","text":"<ul> <li>mcrun-attendance \u2014 Semester attendance system</li> <li>mcrun-master-attendance \u2014 Head run attendance</li> <li>mcrace-code \u2014 McRUN Race registration management</li> <li>Google Apps Script Triggers</li> <li>Google Sheets API</li> <li>McRUN Club GitHub</li> </ul> <p>Last updated: 2025-06-12</p>"},{"location":"projects/new-member-communications-code-old/","title":"New Member Communications","text":""},{"location":"projects/new-member-communications-code-old/#about","title":"About","text":"<p>Automates the process of sending welcome emails and digital passes to new members of the McGill Students Running Club. This Google Apps Script project integrates with Google Sheets, Gmail, and Google Drive to streamline member onboarding and communication.</p> <p>Key features:</p> <ul> <li>Automatically sends a personalized welcome email to new members.</li> <li>Generates and attaches a digital membership pass (with QR code) for each member.</li> <li>Logs email and pass delivery status in a Google Sheet.</li> <li>Supports updating and resending digital passes.</li> <li>Uses Gmail drafts and HTML templates for flexible email content.</li> </ul>"},{"location":"projects/new-member-communications-code-old/#files","title":"Files","text":""},{"location":"projects/new-member-communications-code-old/#github-repo","title":"Github repo","text":"<p>mcrun-new-member-communications</p>"},{"location":"projects/new-member-communications-code-old/#google-sheets","title":"Google Sheets","text":"<p>New Member Comms</p>"},{"location":"projects/new-member-communications-code-old/#apps-script-project","title":"Apps Script project","text":"<p>New Member Communications</p> <p>Required Permissions: - Google Workspace (Gmail, Google Sheets, Google Drive) - Script must be run from the club's Google account for full functionality</p>"},{"location":"projects/new-member-communications-code-old/#documentation","title":"Documentation","text":""},{"location":"projects/new-member-communications-code-old/#functions","title":"Functions","text":"<pre><code>  // Sends a welcome email to the member in the specified row of the sheet.\n  sendWelcomeEmailInRow(row);\n\n  // Sends a personalized welcome email to a new member using their information.\n  sendWelcomeEmail_(memberInformation);\n\n  // Generates a digital pass for a member and returns a download link.\n  createPassFile_(passInfo);\n\n  // Updates member status, creates a new pass, and sends an updated pass email.\n  updateAndSendPass(statusObj, isLogged);\n\n  // Logs email or pass status to the sheet.\n  logMessage_(message, sheet, row);\n</code></pre>"},{"location":"projects/new-member-communications-code-old/#example-usage","title":"Example Usage","text":""},{"location":"projects/new-member-communications-code-old/#send-welcome-email-to-new-member","title":"Send Welcome Email to New Member","text":"<pre><code>// Send welcome email to the last row (newest member)\nsendWelcomeEmailInRow();\n</code></pre>"},{"location":"projects/new-member-communications-code-old/#generate-and-send-updated-pass","title":"Generate and Send Updated Pass","text":"<pre><code>// Update member status and send new pass for row 5\nupdateAndSendPass({\n  email: 'member@email.com',\n  feeStatus: 'Paid',\n  // ...other member info\n});\n</code></pre>"},{"location":"projects/new-member-communications-code-old/#create-a-digital-pass-for-a-member","title":"Create a Digital Pass for a Member","text":"<pre><code>const passUrl = createPassFile_({\n  firstName: 'Jane',\n  lastName: 'Doe',\n  memberId: '12345',\n  // ...other info\n});\nLogger.log(passUrl);\n</code></pre>"},{"location":"projects/new-member-communications-code/","title":"McRUN New Member Communications","text":""},{"location":"projects/new-member-communications-code/#about","title":"About","text":"<p>McRUN New Member Communications is a Google Apps Script project that automates onboarding for new members of the McGill Students Running Club.</p> <p>It generates and sends personalized welcome emails and digital membership passes, integrating with Google Sheets, Gmail, and Google Slides to streamline communications and record-keeping.</p> <p>Purpose</p> <ul> <li>Automatically generate and send a welcome email with a digital pass to new registered members.</li> <li>Log communications and membership information for club administrators.</li> <li>Provide a seamless, professional onboarding experience for all new club members.</li> </ul>"},{"location":"projects/new-member-communications-code/#files","title":"Files","text":"<ul> <li>Github Repo: mcrun-new-member-communications</li> <li>Google Sheets: New Member Communications Sheet</li> <li>Apps Script Project: McRUN New Member Communications Apps Script (Accessible via Extensions &gt; Apps Script in the Google Sheet)</li> </ul>"},{"location":"projects/new-member-communications-code/#key-features","title":"Key Features","text":"<ul> <li>Sends personalized welcome emails with inline images and digital pass attachment.</li> <li>Generates digital membership passes from Google Slides template, including QR code.</li> <li>Caches and reuses email templates and Drive blobs for efficiency.</li> <li>Logs outgoing emails and member info for compliance and reporting.</li> <li>Supports importing and processing from other club systems via Sheets.</li> <li>Customizable HTML email templates.</li> <li>Robust error and status logging for every communication.</li> </ul>"},{"location":"projects/new-member-communications-code/#tools-used","title":"Tools Used","text":"<ul> <li>Google Apps Script (JavaScript/HTML)</li> <li>Google Sheets (Literals, Payment Logs, etc.)</li> <li>Gmail API (send personalized HTML emails, inline images)</li> <li>Google Slides API (generate custom digital passes)</li> <li>Google Drive (store digital passes)</li> <li>Apps Script Triggers (manual, event-based)</li> </ul>"},{"location":"projects/new-member-communications-code/#function-docs","title":"Function Docs","text":"<p>This section is divided by project file (alphabetical order). Each file lists its functions and provides a detailed reference for each.</p> <p>Note: Only a selection of functions may be shown below due to search result limits. See all code/functions in GitHub</p> <p></p>"},{"location":"projects/new-member-communications-code/#member-infogs","title":"#  Member Info.gs","text":"<ul> <li><code>getUserTimeZone()</code> \u2192 Returns user's timezone</li> <li><code>GET_LITERAL_SHEET()</code> \u2192 Returns the \"Literals\" sheet object</li> <li><code>GET_PAYMENT_LOG_SHEET()</code> \u2192 Returns the \"Payment Logs\" sheet object</li> </ul>"},{"location":"projects/new-member-communications-code/#getusertimezone","title":"##  getUserTimeZone()","text":"<p>Returns the user's timezone from script settings.</p> <pre><code>const tz = getUserTimeZone();\n</code></pre> <p>Output: String (timezone)</p>"},{"location":"projects/new-member-communications-code/#get_literal_sheet","title":"##  GET_LITERAL_SHEET()","text":"<p>Returns the \"Literals\" sheet, or opens by ID if not found.</p> <pre><code>const sheet = GET_LITERAL_SHEET();\n</code></pre> <p>Output: Google Sheet object</p>"},{"location":"projects/new-member-communications-code/#get_payment_log_sheet","title":"##  GET_PAYMENT_LOG_SHEET()","text":"<p>Returns the \"Payment Logs\" sheet, or opens by ID if not found.</p> <pre><code>const sheet = GET_PAYMENT_LOG_SHEET();\n</code></pre> <p>Output: Google Sheet object</p> <p></p>"},{"location":"projects/new-member-communications-code/#member-passgs","title":"#  Member Pass.gs","text":"<ul> <li><code>createPassFile(passInfo)</code> \u2192 Generates a digital membership pass using Google Slides</li> </ul>"},{"location":"projects/new-member-communications-code/#createpassfilepassinfo","title":"##  createPassFile(passInfo)","text":"<p>Generates a digital pass file for a member using a Google Slides template, fills in info, generates QR code, and returns the download link.</p> <pre><code>const passUrl = createPassFile({\n  firstName: \"Alice\",\n  lastName: \"Smith\",\n  memberId: \"MC1234\",\n  // ...other fields\n});\n</code></pre> Name Type Description passInfo Object Member data (name, ID, etc) <p>Output: String (download link for pass PNG)</p> <p>Pitfalls: Template and folder IDs must be correct and accessible.</p> <p></p>"},{"location":"projects/new-member-communications-code/#send-emailgs","title":"#  Send Email.gs","text":"<ul> <li><code>sendWelcomeEmailInRow(row)</code> \u2192 Sends a welcome email to the member in a row</li> <li><code>sendWelcomeEmail(memberInformation)</code> \u2192 Sends a personalized welcome email using member info</li> </ul>"},{"location":"projects/new-member-communications-code/#sendwelcomeemailinrowrow","title":"##  sendWelcomeEmailInRow(row)","text":"<p>Sends a welcome email to the member in the specified row of the \"Literals\" sheet. Logs status.</p> <pre><code>sendWelcomeEmailInRow(14);\n</code></pre> Name Type Description row Integer Row to target (default: last row) <p>Output: None (logs status in sheet)</p> <p>Pitfalls: Must be run as the club account.</p>"},{"location":"projects/new-member-communications-code/#sendwelcomeemailmemberinformation","title":"##  sendWelcomeEmail(memberInformation)","text":"<p>Sends a personalized welcome email to a new member using their information and a template.</p> <pre><code>sendWelcomeEmail({\n  firstName: \"Alice\",\n  passUrl: \"https://drive.google.com/...\",\n  email: \"alice@example.com\"\n});\n</code></pre> Name Type Description memberInformation Object Includes firstName, passUrl, email, etc. <p>Output: String (status message)</p> <p></p>"},{"location":"projects/new-member-communications-code/#mail-mergegs","title":"#  Mail Merge.gs","text":"<ul> <li><code>inlineImage()</code> \u2192 Example: send email with inline images</li> <li><code>saveDraftAsHtml()</code> \u2192 Saves HTML of a Gmail draft to Drive</li> <li><code>generateHtmlFromDraft(subjectLine)</code> \u2192 Generates and saves HTML version of an email draft</li> </ul>"},{"location":"projects/new-member-communications-code/#inlineimage","title":"##  inlineImage()","text":"<p>Sends an example email with inline images to demonstrate image embedding.</p> <pre><code>inlineImage();\n</code></pre> <p>Output: None (sends test email)</p>"},{"location":"projects/new-member-communications-code/#savedraftashtml","title":"##  saveDraftAsHtml()","text":"<p>Saves the HTML content of a Gmail draft (by subject) as a file in Drive.</p> <pre><code>saveDraftAsHtml();\n</code></pre> <p>Output: None</p>"},{"location":"projects/new-member-communications-code/#generatehtmlfromdraftsubjectline","title":"##  generateHtmlFromDraft(subjectLine)","text":"<p>Generates and saves the HTML version of an email draft found by subject.</p> <pre><code>generateHtmlFromDraft(\"Here's your post-run report! \ud83d\ude4c\");\n</code></pre> Name Type Description subjectLine String Subject of draft <p>Output: None (file created in Drive)</p>"},{"location":"projects/new-member-communications-code/#triggers","title":"Triggers","text":""},{"location":"projects/new-member-communications-code/#types-of-triggers","title":"Types of Triggers","text":"<ul> <li>Manual triggers: </li> <li>Most functions are designed to be invoked when a new member is added, or by admin action via Apps Script.</li> <li>Event-based triggers: </li> <li>Can be set up to run when new rows are added (e.g., via onChange in a connected membership sheet).</li> <li>Time-based triggers: </li> <li>Not present by default, but possible for scheduled reminders or follow-ups if extended.</li> </ul> <p>Purpose: - Automate sending of welcome emails and pass generation for each new member registration.</p>"},{"location":"projects/new-member-communications-code/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"Issue/Error Likely Cause Solution \"Wrong email. Please try using the club's account\" Script not run as mcrunningclub@ssmu.ca Use the club account to send emails \"Expected X for newMemberValues.length...\" Sheet column mismatch Ensure header and data columns match \"Blob not found\" Script property missing or not cached Run cacheBlobToStore or check Drive file access \"Template/Drive ID not found\" File/folder IDs incorrect Double-check and update IDs in the code Email not received Spam filter, wrong address Check recipient address and Gmail spam folder"},{"location":"projects/new-member-communications-code/#see-also","title":"See Also","text":"<ul> <li>mcrun-membership-list \u2014 Membership roster automation</li> <li>mcrace-code \u2014 McRUN Race registration management</li> <li>Google Apps Script Triggers</li> <li>Google Sheets API</li> <li>McRUN Club GitHub</li> </ul> <p>Last updated: 2025-06-12</p>"},{"location":"projects/points-system-code/","title":"McRUN Points System","text":""},{"location":"projects/points-system-code/#about","title":"About","text":"<p>The McRUN Points System is a Google Apps Script codebase designed to automate, calculate, and manage member points and event logs for the McGill Students Running Club. This system integrates with Google Sheets to record and tally participation, interfaces with Strava to extract running data, and automates communications and formatting via Gmail and Google Drive.</p> <p>The project's purpose is to streamline the tracking of club events, automate member points calculation, and enhance the club's engagement and reporting using cloud tools and APIs.</p>"},{"location":"projects/points-system-code/#files","title":"Files","text":"<ul> <li>Github Repo: points-system</li> <li>Google Sheets: Points Ledger - 2024/2025</li> <li>Apps Script Project: Points Ledger Code (McRUN) (Accessible via Extensions &gt; Apps Script in the Google Sheet)</li> </ul>"},{"location":"projects/points-system-code/#key-features","title":"Key Features","text":"<ul> <li>Automated points calculation and event logging for club activities.</li> <li>Strava API integration to auto-import running data.</li> <li>Dynamic email generation for reporting and member notifications.</li> <li>Custom formatting of event and points ledger sheets.</li> <li>Time-based and web triggers for scheduled automation.</li> <li>Script property storage for secure handling of credentials.</li> <li>Tools for extracting and formatting HTML email templates.</li> <li>Map image generation for event routes.</li> <li>Robust logging and error handling.</li> </ul>"},{"location":"projects/points-system-code/#tools-used","title":"Tools Used","text":"<ul> <li>Google Apps Script (Sheets, Drive, Gmail, Calendar)</li> <li>Strava API (OAuth2)</li> <li>Google Cloud APIs (Maps, Storage)</li> <li>Make.com automations</li> <li>HTML template processing for emails</li> </ul>"},{"location":"projects/points-system-code/#function-docs","title":"Function Docs","text":"<p>This section is divided by project file (in alphabetical order). Each file includes a list of all its functions and a detailed entry for each.</p> <p>Note: Functions named with a trailing underscore (<code>_</code>) are internal but documented here with the underscore removed.</p> <p></p>"},{"location":"projects/points-system-code/#formattinggs","title":"#  Formatting.gs","text":"<ul> <li><code>sortTimestampByAscending()</code> \u2192 Sorts event log by timestamp ascending</li> <li><code>formatSpecificColumns()</code> \u2192 Formats columns in Head Run Attendance sheet</li> <li><code>toTitleCase(inputString)</code> \u2192 Converts a string to title case</li> </ul>"},{"location":"projects/points-system-code/#sorttimestampbyascending","title":"##  sortTimestampByAscending()","text":"<p>Sorts the event log sheet by event timestamp (ascending, skipping headers).</p> <pre><code>sortTimestampByAscending();\n</code></pre> <p>Pitfalls: Assumes event timestamp is in column 3 and headers are at row 1.</p>"},{"location":"projects/points-system-code/#formatspecificcolumns","title":"##  formatSpecificColumns()","text":"<p>Applies formatting (bold, wrap, checkbox, font size) to columns in the \"Head Run Attendance\" sheet.</p> <pre><code>formatSpecificColumns();\n</code></pre> <p>Pitfalls: Sheet/range must exist; formatting is hardcoded.</p>"},{"location":"projects/points-system-code/#totitlecaseinputstring","title":"##  toTitleCase(inputString)","text":"<p>Converts a string to title case.</p> <pre><code>const result = toTitleCase(\"hello world\");\n</code></pre> Name Type Description inputString String String to format <p>Output: String (title-cased)</p> <p></p>"},{"location":"projects/points-system-code/#html-extractiongs","title":"#  HTML-Extraction.gs","text":"<ul> <li><code>extractTagsFromProjectFile()</code> \u2192 Extracts placeholder tags from HTML template</li> <li><code>extractPlaceholders()</code> \u2192 Extracts double-curly placeholders from email text</li> <li><code>createInlineImage(fileUrl, blobKey)</code> \u2192 Creates inline image blob</li> <li><code>saveDraftAsHtml()</code> \u2192 Saves a Gmail draft as an HTML file in Drive</li> </ul>"},{"location":"projects/points-system-code/#extracttagsfromprojectfile","title":"##  extractTagsFromProjectFile()","text":"<p>Extracts all placeholder tags (e.g., <code>&lt;?= TAG ?&gt;</code>) from a named HTML file in the project.</p> <pre><code>extractTagsFromProjectFile();\n</code></pre> <p>Output: In Logger.</p>"},{"location":"projects/points-system-code/#extractplaceholders","title":"##  extractPlaceholders()","text":"<p>Extracts all <code>{{placeholder}}</code> tags from the email template text.</p> <pre><code>extractPlaceholders();\n</code></pre> <p>Output: Logs placeholder list</p> <p>Pitfalls: Requires <code>STATS_EMAIL_OBJ.text</code> to be defined.</p>"},{"location":"projects/points-system-code/#createinlineimagefileurl-blobkey","title":"##  createInlineImage(fileUrl, blobKey)","text":"<p>Creates a blob for an image file from its Google Drive URL and assigns a content ID.</p> <pre><code>const blob = createInlineImage('https://drive.google.com/file/d/FILE_ID/view', 'mapCid');\n</code></pre> Name Type Description fileUrl String Drive file URL blobKey String Blob name/content ID <p>Output: Blob (image for inline email attachment)</p> <p>Pitfalls: File must exist and be accessible.</p>"},{"location":"projects/points-system-code/#savedraftashtml","title":"##  saveDraftAsHtml()","text":"<p>Saves the body of a Gmail draft (by subject line) as an HTML file in Drive.</p> <pre><code>saveDraftAsHtml();\n</code></pre> <p>Output: Creates file in Drive</p> <p>Pitfalls: Draft with the specified subject must exist.</p> <p></p>"},{"location":"projects/points-system-code/#ledger-codegs","title":"#  Ledger-Code.gs","text":"<ul> <li><code>newSubmission()</code> \u2192 Formats and sorts a new event submission</li> <li><code>getLatestSubmissionTimestamp()</code> \u2192 Gets latest event timestamp (Date)</li> <li><code>getSubmissionTimestamp(row)</code> \u2192 Gets event timestamp for a row</li> <li><code>getValidLastRow(sheet)</code> \u2192 Gets last non-empty row in a sheet</li> <li><code>getLatestLog()</code> \u2192 Gets the latest log row data</li> <li><code>getLogInRow(row)</code> \u2192 Gets data for a specific row</li> <li><code>getAttendeesInLog(row)</code> \u2192 Gets attendees for a log row</li> </ul>"},{"location":"projects/points-system-code/#newsubmission","title":"##  newSubmission()","text":"<p>Formats the columns and sorts timestamps for a new event submission.</p> <pre><code>newSubmission();\n</code></pre> <p>Output: None</p>"},{"location":"projects/points-system-code/#getlatestsubmissiontimestamp","title":"##  getLatestSubmissionTimestamp()","text":"<p>Returns the latest event timestamp as a Date object.</p> <pre><code>const latest = getLatestSubmissionTimestamp();\n</code></pre> <p>Output: Date</p>"},{"location":"projects/points-system-code/#getsubmissiontimestamprow","title":"##  getSubmissionTimestamp(row)","text":"<p>Returns the timestamp of a submission for a given row.</p> <pre><code>const ts = getSubmissionTimestamp(7);\n</code></pre> Name Type Description row Integer Row in sheet <p>Output: Date</p>"},{"location":"projects/points-system-code/#getvalidlastrowsheet","title":"##  getValidLastRow(sheet)","text":"<p>Finds the last non-empty row in a sheet.</p> <pre><code>const lastRow = getValidLastRow(LOG_SHEET);\n</code></pre> Name Type Description sheet Sheet Sheet to check <p>Output: Integer (row index)</p>"},{"location":"projects/points-system-code/#getlatestlog","title":"##  getLatestLog()","text":"<p>Returns the data (array) from the latest log row.</p> <pre><code>const log = getLatestLog();\n</code></pre>"},{"location":"projects/points-system-code/#getloginrowrow","title":"##  getLogInRow(row)","text":"<p>Returns log row data as array for a specific row.</p> <pre><code>const rowData = getLogInRow(10);\n</code></pre> Name Type Description row Integer Row in sheet <p>Output: Array</p>"},{"location":"projects/points-system-code/#getattendeesinlogrow","title":"##  getAttendeesInLog(row)","text":"<p>Gets the list of attendees for a given log row.</p> <pre><code>const attendees = getAttendeesInLog(5);\n</code></pre> Name Type Description row Integer Row in sheet <p></p>"},{"location":"projects/points-system-code/#ledger-variablesgs","title":"#  Ledger-Variables.gs","text":"<ul> <li><code>getLedger()</code> \u2192 Returns cached ledger data</li> <li><code>getLogSheet()</code> \u2192 Returns Event Log sheet object</li> <li><code>getLedgerSheet()</code> \u2192 Returns Member Points sheet object</li> </ul>"},{"location":"projects/points-system-code/#getledger","title":"##  getLedger()","text":"<p>Returns or initializes the cached ledger data.</p> <pre><code>const data = getLedger();\n</code></pre> <p>Output: Array/object</p>"},{"location":"projects/points-system-code/#getlogsheet","title":"##  getLogSheet()","text":"<p>Returns the Event Log sheet object.</p> <pre><code>const sheet = getLogSheet();\n</code></pre> <p>Output: Sheet</p>"},{"location":"projects/points-system-code/#getledgersheet","title":"##  getLedgerSheet()","text":"<p>Returns the Member Points sheet object.</p> <pre><code>const sheet = getLedgerSheet();\n</code></pre> <p>Output: Sheet</p> <p></p>"},{"location":"projects/points-system-code/#map-generationgs","title":"#  Map-Generation.gs","text":"<ul> <li><code>createAndAppendMap(timestamp, activity)</code> \u2192 Generates and appends map URL to activity</li> <li><code>createStravaMap(activity, name)</code> \u2192 Creates PNG map image from Strava activity</li> <li><code>saveMapForRun(polyline, name)</code> \u2192 Saves map for run to storage</li> </ul>"},{"location":"projects/points-system-code/#createandappendmaptimestamp-activity","title":"##  createAndAppendMap(timestamp, activity)","text":"<p>Creates and stores a PNG map from Strava activity, appending the URL to the activity.</p> <pre><code>const updatedActivity = createAndAppendMap(new Date(), activityObj);\n</code></pre> Name Type Description timestamp Date Event timestamp activity Object Strava activity data <p>Output: Object (activity with <code>mapUrl</code> property)</p>"},{"location":"projects/points-system-code/#createstravamapactivity-name","title":"##  createStravaMap(activity, name)","text":"<p>Creates a PNG map image from a Strava activity and returns the blob.</p> <pre><code>const blob = createStravaMap(activityObj, 'run-map.png');\n</code></pre> Name Type Description activity Object Strava activity name String Map file name <p>Output: Blob</p>"},{"location":"projects/points-system-code/#savemapforrunpolyline-name","title":"##  saveMapForRun(polyline, name)","text":"<p>Saves a polyline as a map image using Google Maps API and automation.</p> <pre><code>const resp = saveMapForRun('encoded_polyline', 'run-map.png');\n</code></pre> Name Type Description polyline String Encoded polyline name String Map file name <p>Output: API response</p> <p></p>"},{"location":"projects/points-system-code/#send-emailgs","title":"#  Send-Email.gs","text":"<ul> <li><code>logStatus(messageArr, logSheet, thisRow)</code> \u2192 Logs email sending status</li> </ul>"},{"location":"projects/points-system-code/#logstatusmessagearr-logsheet-thisrow","title":"##  logStatus(messageArr, logSheet, thisRow)","text":"<p>Logs the email sending/update status for a given row.</p> <pre><code>logStatus(['Sent', 'Success'], LOG_SHEET, 5);\n</code></pre> Name Type Description messageArr String[] Array of status messages logSheet Sheet Log sheet object (default: <code>LOG_SHEET</code>) thisRow Integer Row number (default: last row) <p>Output: None (status appended in sheet)</p> <p></p>"},{"location":"projects/points-system-code/#strava-codegs","title":"#  Strava-Code.gs","text":"<ul> <li><code>findAndStoreStravaActivity(row)</code> \u2192 Finds and stores Strava activity for a log row</li> <li><code>prettyLog(msg)</code> \u2192 Multi-line log utility</li> </ul>"},{"location":"projects/points-system-code/#findandstorestravaactivityrow","title":"##  findAndStoreStravaActivity(row)","text":"<p>Finds Strava activity for a row (from log or API), stores it, and returns the activity.</p> <pre><code>const activity = findAndStoreStravaActivity(10);\n</code></pre> Name Type Description row Integer Row to process (default: last log) <p>Output: Object (Strava activity)</p> <p>Pitfalls: User must be logged in as club; Strava API may rate limit.</p>"},{"location":"projects/points-system-code/#prettylogmsg","title":"##  prettyLog(...msg)","text":"<p>Logs multiple lines for better readability.</p> <pre><code>prettyLog('line1', 'line2', 'line3');\n</code></pre> Name Type Description msg String[] Messages to log <p></p>"},{"location":"projects/points-system-code/#strava-servicegs","title":"#  Strava-Service.gs","text":"<ul> <li><code>reset()</code> \u2192 Resets Strava OAuth2 authorization state</li> <li><code>safeReset()</code> \u2192 Conditionally resets OAuth2 state</li> <li><code>getStravaActivity(fromTimestamp, toTimestamp)</code> \u2192 Fetches Strava activities in a time range</li> <li><code>getStravaService()</code> \u2192 Configures and returns the OAuth2 service</li> </ul>"},{"location":"projects/points-system-code/#reset","title":"##  reset()","text":"<p>Resets the Strava OAuth2 authorization state.</p> <pre><code>reset();\n</code></pre> <p>Output: None</p>"},{"location":"projects/points-system-code/#safereset","title":"##  safeReset()","text":"<p>Resets Strava OAuth2 authorization if allowed in script properties.</p> <pre><code>safeReset();\n</code></pre> <p>Output: None</p>"},{"location":"projects/points-system-code/#getstravaactivityfromtimestamp-totimestamp","title":"##  getStravaActivity(fromTimestamp, toTimestamp)","text":"<p>Fetches Strava activities in the given time range.</p> <pre><code>const activities = getStravaActivity(unixStart, unixEnd);\n</code></pre> Name Type Description fromTimestamp Integer Start Unix time toTimestamp Integer End Unix time <p>Output: Array of Strava activities</p>"},{"location":"projects/points-system-code/#getstravaservice","title":"##  getStravaService()","text":"<p>Configures and returns the OAuth2 service for Strava.</p> <pre><code>const service = getStravaService();\n</code></pre> <p>Output: OAuth2 service object</p> <p></p>"},{"location":"projects/points-system-code/#triggersgs","title":"#  Triggers.gs","text":"<ul> <li><code>doGet(e)</code> \u2192 Handles GET requests for Strava triggers</li> <li><code>createNewStravaTrigger(row)</code> \u2192 Creates a time-based Strava trigger for a row</li> <li><code>runStravaChecker()</code> \u2192 Checks for Strava activity and cleans up triggers</li> </ul>"},{"location":"projects/points-system-code/#dogete","title":"##  doGet(e)","text":"<p>Handles GET requests to set up Strava triggers via web endpoint.</p> <pre><code>doGet(e);\n</code></pre> Name Type Description e Object Event object from web request <p>Output: ContentService TextOutput</p> <p>Pitfalls: Requires correct API key in <code>e.parameter.key</code>.</p>"},{"location":"projects/points-system-code/#createnewstravatriggerrow","title":"##  createNewStravaTrigger(row)","text":"<p>Creates a new time-based trigger for checking Strava for a row.</p> <pre><code>createNewStravaTrigger(5);\n</code></pre> Name Type Description row Integer Row to associate with the trigger <p>Output: None (side effect: creates trigger and script property)</p>"},{"location":"projects/points-system-code/#runstravachecker","title":"##  runStravaChecker()","text":"<p>Checks all active Strava triggers, verifies activities, and cleans up when found.</p> <pre><code>runStravaChecker();\n</code></pre> <p>Output: None</p>"},{"location":"projects/points-system-code/#triggers","title":"Triggers","text":"<p>The project uses several types of triggers:</p> <ul> <li>Time-based triggers: Scheduled (e.g., every 30 minutes) for checking Strava activities, sending emails, and formatting sheets.</li> <li>Web app triggers: The <code>doGet(e)</code> function can be deployed as a web app endpoint for remote automation.</li> <li>Manual triggers: Functions like <code>newSubmission()</code> or <code>safeReset()</code> may be called manually for setup or maintenance.</li> </ul> <p>Purpose: Triggers automate the periodic checking for new Strava runs, update points, send notifications, and keep the points ledger up to date without human intervention.</p>"},{"location":"projects/points-system-code/#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"Issue/Error Cause Solution \"Unauthorized! Please verify key.\" Wrong API key Set correct key in script properties and request \"No permission\" Missing OAuth scopes Ensure all required Apps Script scopes are granted \"Cannot read property 'getRange' of null\" Missing or renamed sheet/range Double-check all sheet names and constants \"Rate limit exceeded\" Strava API throttling Wait and retry, ensure efficient API use \"OAuth error\" Strava authorization failed Use <code>reset()</code> or <code>safeReset()</code> to reauthorize <p>FAQ</p> <ul> <li> <p>How do I update Strava credentials?   Update <code>CLIENT_ID</code> and <code>CLIENT_SECRET</code> in Apps Script &gt; Project Properties.</p> </li> <li> <p>How do I add a new event type?   Update constants in <code>Ledger-Variables.gs</code> and related logic in points calculation.</p> </li> <li> <p>How do I test a function?   Use the Apps Script IDE's \u201cRun\u201d feature; check the logs/output in Execution Log.</p> </li> </ul>"},{"location":"projects/points-system-code/#see-also","title":"See Also","text":"<ul> <li>McRUN Attendance</li> <li>Strava API Docs</li> <li>Google Apps Script OAuth2 Library</li> <li>Apps Script Properties Service</li> </ul> <p>Last updated: 2025-06-12</p>"},{"location":"projects/projects/","title":"Project Source Code Documentation","text":"<p>Each project has its own Google Sheet and associated Google Apps Scripts, and its own Github repo.</p> <p>Membership Code manages the club membership ledger</p> <p>Attendance Code records attendance at various events</p> <p>Points System Code keeps track of members' points and sends emails accordingly</p> <p>McRace Code contains stuff for our 5k race event</p> <p> </p>"},{"location":"projects/projects/#how-to-read-function-documentation","title":"How to Read Function Documentation","text":"<p>Each function is documented using the following template (see image):</p>"},{"location":"projects/projects/#example","title":"Example:","text":"<p>sendEmail(recipient, subject, body) Sends an email message.</p> <pre><code>MailApp.sendEmail(\n  'recipient@example.com',\n  'TPS reports',\n  'Where are the TPS reports?',\n);\n</code></pre> Name Type Description recipient String The addresses of the recipients subject String The subject line body String The body of the email"},{"location":"start/","title":"McGill Students Running Club (McRUN) System","text":"<p>The McRun system is used to add new members, keep track of existing ones, updating the points system, and more!</p>"},{"location":"start/changelog/","title":"Change Log","text":"<p>All notable changes to this project will be documented in this file. The format is based on Material for MkDocs.</p>"},{"location":"start/changelog/#types-of-changes","title":"Types of Changes","text":"<ul> <li><code>Added</code> for new features.</li> <li><code>Changed</code> for changes in existing functionality.</li> <li><code>Deprecated</code> for soon-to-be removed features.</li> <li><code>Removed</code> for now removed features.</li> <li><code>Fixed</code> for any bug fixes.</li> <li><code>Security</code> in case of vulnerabilities.</li> </ul>"},{"location":"start/changelog/#0.1.1","title":"0.1.1 - June 12, 2025","text":"<ul> <li>Changed sections in code docs to ensure consistent design.</li> <li>Removed unused documents.</li> </ul>"},{"location":"start/changelog/#0.1.0","title":"0.1.0 - June 11, 2025","text":"<ul> <li>Updated project layout in <code>getting-started.md</code>.</li> <li>Merged <code>docs-test</code> with <code>docs-m</code> branch.</li> <li>Updated <code>authors.yml</code> for new tech team members.</li> <li>Applied consistent formatting in <code>attendance-semester-code.md</code></li> </ul>"},{"location":"start/changelog/#1.0.5","title":"0.0.5 - June 10, 2025","text":"<ul> <li>Added new <code>README.md</code> and <code>FAQ.md</code> files to the \"start\" directory.</li> <li>Enhanced <code>mkdocs.yml</code> navigation structure and added copyright information.</li> <li>Improved attendance-semester-code.md with detailed function documentation.</li> <li>Added projects.md to document project-specific source code.</li> <li>Updated <code>.authors.yml</code> to include new author Mona Liu.</li> <li>Modified <code>.gitignore</code> to include <code>docs/start/.t.md</code>.</li> <li>Added <code>setup.md</code> with detailed setup instructions for contributors.</li> </ul>"},{"location":"start/changelog/#1.0.4","title":"0.0.4 - May 28, 2025","text":"<ul> <li>Updated \"Get Started\" section</li> </ul>"},{"location":"start/changelog/#1.0.3","title":"0.0.3 - May 26, 2025","text":"<ul> <li>Created <code>ci.yml</code> to publish and update mcrun system documentation</li> </ul>"},{"location":"start/changelog/#1.0.2","title":"0.0.2 - May 26, 2025","text":"<ul> <li>Added <code>index.md</code> for home page</li> <li>Started project pages <code>attendance-semester-code.md</code>, <code>membership-list-code.md</code></li> </ul>"},{"location":"start/changelog/#1.0.1","title":"0.0.1 - May 26, 2025","text":"<ul> <li>Created draft of MkDocs for McRUN documentation</li> </ul>"},{"location":"start/changelog/#1.0.0","title":"0.0.0 - May 26, 2025","text":"<ul> <li>Initial release of the new documentation site</li> <li>Added mkdocs pages and assets</li> </ul>"},{"location":"start/code-examples/","title":"Code Examples","text":"add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> highlight-code.md<pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"start/contributing/","title":"Contributing","text":""},{"location":"start/contributing/#contributing-to-the-code","title":"Contributing to the code","text":""},{"location":"start/contributing/#google-scripts","title":"Google Scripts","text":"<ul> <li>Make sure your Google account has edit access to Google Sheets (read access         to Gmail for payment verification).</li> <li>Open the Google Sheet and ensure you are signed in with the correct Google account.</li> <li>Authorize the Apps Script project when prompted (first use or after script changes).</li> <li>If using scheduled triggers, ensure you have permission to create time-based triggers in Apps Script.</li> <li>Open the Apps Script editor (Extensions &gt; Apps Script or script.google.com) to view or modify scripts.</li> </ul>"},{"location":"start/contributing/#clasp","title":"clasp","text":"<ul> <li>You can also use Google's <code>clasp</code> module to edit Apps Script files locally.</li> <li>After installing node.js and npm, run <code>npm install -g @google/clasp</code> (to         install globally; then you can call clasp directly from anywhere) or <code>npm install --save-dev @google/clasp</code> (to install locally; then you need to         call clasp using its full path).</li> <li>Use <code>clasp login</code> to authorize your Google account.</li> <li>Push and pull changes to the Apps Script project with <code>clasp push</code> and <code>clasp pull</code>.</li> </ul>"},{"location":"start/contributing/#version-control","title":"Version control","text":"<ul> <li>If directly editing scripts in your browser:<ul> <li>Install the Google Apps Script Github Assistant (Chrome only).</li> <li>Go to your Github account &gt; Settings &gt; Developer Settings &gt; Personal access tokens &gt; Fine-grained tokens and generate a new one.</li> <li>Set the resource owner to mcrunningclub and repository access to All repositories.</li> <li>The required permissions are in the Repository permissions section:<ul> <li>Commit statuses - read &amp; write</li> <li>Contents - read &amp; write</li> <li>Pull requests - read &amp; write</li> </ul> </li> <li>After copying your generated token, log in to the extension using \"Extension options\"; it should require access to your account.</li> <li>Now the repositories should show up in the Apps Script editor toolbar.</li> </ul> </li> </ul>"},{"location":"start/contributing/#contributing-to-the-docs-this","title":"Contributing to the docs (this)","text":"<ul> <li>The docs use mkdocs with the Material theme, which you can install using <code>pip install mkdocs-material</code>.</li> <li>The source files are in the <code>docs</code> folder of the <code>mcrun-system</code> repository.</li> <li>There is a github action configured to deploy the docs to mcrunningclub.github.io/mcrun-system/ whenever the main branch is updated</li> <li>See the other sections for more information on mkdocs, syntax, and formatting.</li> </ul>"},{"location":"start/contributing/#example-function-documentation","title":"Example function documentation:","text":"<pre><code>**sendEmail(recipient, subject, body)**  \nSends an email message.\n\n```js\nMailApp.sendEmail(\n  'recipient@example.com',\n  'TPS reports',\n  'Where are the TPS reports?',\n);\n```\n\n| Name      | Type   | Description                              |\n|-----------|--------|------------------------------------------|\n| recipient | String | The addresses of the recipients          |\n| subject   | String | The subject line                         |\n| body      | String | The body of the email                    |\n</code></pre> <p>sendEmail(recipient, subject, body) Sends an email message.</p> <pre><code>MailApp.sendEmail(\n  'recipient@example.com',\n  'TPS reports',\n  'Where are the TPS reports?',\n);\n</code></pre> Name Type Description recipient String The addresses of the recipients subject String The subject line body String The body of the email"},{"location":"start/faq/","title":"FAQ","text":"<p>Here are some information about our system.</p>"},{"location":"start/getting-started/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"start/getting-started/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"start/getting-started/#project-layout","title":"Project layout","text":"<pre><code>\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 ci.yml                # GitHub Actions workflow for CI/CD\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 .authors.yml              # Author information\n\u2502   \u251c\u2500\u2500 index.md                  # Documentation homepage\n\u2502   \u251c\u2500\u2500 assets/                   # Images and logos\n\u2502   \u2502   \u251c\u2500\u2500 mcrun-favicon.png\n\u2502   \u2502   \u2514\u2500\u2500 mcrun-logo-circle.png\n\u2502   \u251c\u2500\u2500 projects/                 # Project-specific documentation\n\u2502   \u2502   \u251c\u2500\u2500 attendance-code-old.md\n\u2502   \u2502   \u251c\u2500\u2500 attendance-master-code.md\n\u2502   \u2502   \u251c\u2500\u2500 attendance-semester-code.md\n\u2502   \u2502   \u251c\u2500\u2500 attendance-semester2-code.md\n\u2502   \u2502   \u251c\u2500\u2500 mcrace-code.md\n\u2502   \u2502   \u251c\u2500\u2500 membership-list-code.md\n\u2502   \u2502   \u251c\u2500\u2500 new-member-communications-code.md\n\u2502   \u2502   \u251c\u2500\u2500 points-email-code.md\n\u2502   \u2502   \u251c\u2500\u2500 points-system-code.md\n\u2502   \u2502   \u2514\u2500\u2500 projects.md\n\u2502   \u251c\u2500\u2500 start/                    # Start documentation\n\u2502   \u2502   \u251c\u2500\u2500 .t.md\n\u2502   \u2502   \u251c\u2500\u2500 changelog.md\n\u2502   \u2502   \u251c\u2500\u2500 code-examples.md\n\u2502   \u2502   \u251c\u2500\u2500 faq.md\n\u2502   \u2502   \u251c\u2500\u2500 getting-started.md\n\u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u251c\u2500\u2500 setup.md\n\u2502   \u2502   \u251c\u2500\u2500 syntax.md\n\u2502   \u2502   \u2514\u2500\u2500 typography.md\n\u2502   \u251c\u2500\u2500 stylesheets/              # Custom stylesheets\n\u2502   \u2502   \u251c\u2500\u2500 extra.css\n\u2502   \u2502   \u2514\u2500\u2500 extra.scss\n\u251c\u2500\u2500 LICENSE                       # MIT License\n\u251c\u2500\u2500 LICENSE.md                    # Private Use License\n\u251c\u2500\u2500 mkdocs.yml                    # MkDocs configuration file\n</code></pre>"},{"location":"start/setup/","title":"Setup","text":""},{"location":"start/setup/#quick-start","title":"Quick Start","text":"<p>This guide is for contributors and club admins to get up and running with the McRUN Attendance scripts.</p>"},{"location":"start/setup/#permissions","title":"Permissions","text":"<ul> <li>Google Sheets: Edit access</li> <li>Gmail: Read access</li> <li>Calendar: Read/write access</li> </ul>"},{"location":"start/setup/#edit-scripts","title":"Edit Scripts","text":"<ul> <li>Open the Google Sheet and ensure you are signed in with the correct Google account.</li> <li>Authorize the Apps Script project when prompted (first use or after script changes).</li> <li>If using scheduled triggers, ensure you have permission to create time-based triggers in Apps Script.</li> <li>Open the Apps Script editor (Extensions &gt; Apps Script) to view or modify scripts.</li> </ul>"},{"location":"start/setup/#run-scripts","title":"Run Scripts","text":"<ul> <li>Most scripts run automatically on form submission or via custom menu in the Sheet.</li> <li>Manual triggers can be run from the Apps Script editor if needed.</li> </ul>"},{"location":"start/setup/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>A Google Workspace (Gmail) account with edit access to the Attendance Sheet.</li> <li>Permissions to view and edit Google Apps Script attached to this Sheet.</li> <li>Club admin email(s) must be added to the <code>PERM_USER_</code> constant in the code.</li> </ul>"},{"location":"start/setup/#2-setup-steps","title":"2. Setup Steps","text":"<ul> <li>Open Google Sheet: Open the Attendance Sheet and go to Extensions &gt; Apps Script.</li> <li>Add/Update Scripts: Copy script files from this repo into the Apps Script editor.</li> <li>Deploy Triggers:  </li> <li>In Apps Script, go to Triggers.</li> <li>Set up triggers for functions like <code>onFormSubmission</code>, <code>onAppSubmission</code>, and any scheduled calendar checks as described in this documentation.</li> <li>Test Automation:  </li> <li>Submit a test attendance form.</li> <li>Confirm attendance is processed, formatted, and transferred to the Points Ledger.</li> <li>Check logs (View &gt; Executions) for errors.</li> </ul>"},{"location":"start/setup/#3-permissions-for-contributors","title":"3. Permissions for Contributors","text":"<ul> <li>Add your Google account to the Editors list for the Sheet.</li> <li>Request admin to whitelist your email in the <code>PERM_USER</code> array.</li> </ul>"},{"location":"start/setup/#environment-permissions","title":"Environment &amp; Permissions","text":""},{"location":"start/setup/#google-account-permissions","title":"Google Account Permissions","text":"<ul> <li>Sheets API: Read and write access to the Attendance Sheet and Points Ledger.</li> <li>Gmail API: (If using email features) Send and read email.</li> <li>Calendar API: For time-based and event-based triggers.</li> <li>Properties Service: Store persistent data (e.g., headrunners, headruns).</li> </ul>"},{"location":"start/setup/#apps-script-scopes","title":"Apps Script Scopes","text":"<p>Be sure to grant the following scopes when authorizing for the first time:</p> <ul> <li><code>https://www.googleapis.com/auth/spreadsheets</code></li> <li><code>https://www.googleapis.com/auth/script.external_request</code></li> <li><code>https://www.googleapis.com/auth/calendar</code></li> <li><code>https://www.googleapis.com/auth/gmail.send</code> (if emailing)</li> <li><code>https://www.googleapis.com/auth/script.properties</code></li> <li><code>https://www.googleapis.com/auth/userinfo.email</code></li> </ul>"},{"location":"start/setup/#setting-up-triggers","title":"Setting Up Triggers","text":"<ol> <li>Form Submission: Set up a trigger for <code>onFormSubmission</code> (From form).</li> <li>App Submission: Set up a trigger for <code>onAppSubmission</code> (From event or manual).</li> <li>Scheduled Checks:  </li> <li>Use time-driven triggers (e.g., weekly, daily) for functions like <code>updateWeeklyCalendarTriggers</code>.</li> <li>Calendar event-based triggers for event-driven attendance checks.</li> </ol>"},{"location":"start/syntax/","title":"Syntax","text":""},{"location":"start/syntax/#module-sample","title":"Module sample","text":"<p>This is a sample module.</p>"},{"location":"start/syntax/#variables","title":"Variables","text":"<ul> <li>variable (<code>int</code>): Docstrings for module-level variables.</li> </ul>"},{"location":"start/syntax/#classes","title":"Classes","text":""},{"location":"start/syntax/#SampleClass","title":"SampleClass","text":"<pre><code>class SampleClass(self, b: str)\n</code></pre> <p>Class docstrings.</p> <p>Attributes</p> <ul> <li>baz (<code>str</code>): Docstrings for attributes.</li> </ul> <p>Args</p> <ul> <li>b (<code>str</code>): Arguments for initializing.</li> </ul>"},{"location":"start/syntax/#SampleClass-methods","title":"Methods","text":"<p>method</p> <pre><code>def method(self, bar: int) -&gt; str\n</code></pre> <p>Method docstrings.</p> <p>Cross reference available. <code>func</code></p> <p>Args</p> <ul> <li>bar (<code>int</code>)</li> </ul> <p>Returns</p> <ul> <li><code>str</code></li> </ul>"},{"location":"start/typography/","title":"Typography","text":""},{"location":"start/typography/#typefaces","title":"Typefaces","text":"<ul> <li>Headers: Inter</li> <li>Code: Hack</li> </ul>"},{"location":"start/typography/#body","title":"Body","text":"<ul> <li><code>&lt;samp&gt;</code> This is a sample text example.</li> <li><code>&lt;strong&gt;</code> This is a bold text example.</li> <li><code>&lt;em&gt;</code> This is an italic text example.</li> <li><code>&lt;u&gt;</code> This is an underlined text example.</li> <li><code>&lt;s&gt;</code> This is a strikethrough text example.</li> <li><code>&lt;mark&gt;</code> This is a highlighted text example.</li> <li><code>&lt;small&gt;</code> This is a small text example.</li> <li><code>&lt;del&gt;</code> This is a deleted text example.</li> <li> <p><code>&lt;ins&gt;</code> This is an inserted text example.</p> </li> <li> <p><code>&lt;sup&gt;</code> <sup>This is a superscript text example.</sup></p> </li> <li> <p><code>&lt;sub&gt;</code> <sub>This is a subscript text example.</sub></p> </li> <li> <p><code>&lt;kbd&gt;</code> This is a keyboard input text example.</p> </li> <li><code>&lt;var&gt;</code> This is a variable text example.</li> <li><code>&lt;cite&gt;</code> This is a citation text example.</li> <li><code>&lt;q&gt;</code> This is a short inline quotation text example.</li> <li> <p><code>&lt;abbr title=\"\"&gt;</code> HTML is an example of an abbreviation.</p> </li> <li> <p><code>&lt;bdo&gt; dir=\"\"</code> This is a bidirectional override text example.</p> </li> </ul>"},{"location":"start/typography/#headings","title":"Headingsh2. Heading Secondary text","text":"<p>All HTML headings, <code>&lt;h1&gt;</code> through <code>&lt;h6&gt;</code>, are available. <code>.h1</code> through <code>.h6</code> classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline.</p> <p></p> h1. Heading Secondary text h3. Heading Secondary text h4. Heading Secondary text h5. Heading Secondary text h6. Heading Secondary text"},{"location":"start/typography/#blockquotes","title":"Blockquotes","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p> Someone famous in Source Title"},{"location":"start/typography/#code","title":"Code","text":"<p>This is an example of inline code <code>#import requests</code></p> Preformatted Code Blocks with Syntax Highlighting <pre><code>def request(method, url, **kwargs):\n    \"\"\"Constructs and sends a :class:`Request &lt;Request&gt;`.\n    Usage::\n      &gt;&gt;&gt; import requests\n      &gt;&gt;&gt; req = requests.request('GET', 'https://httpbin.org/get')\n      &lt;Response [200]&gt;\n    \"\"\"\n\n    # By using the 'with' statement we are sure the session is closed, thus we\n    # avoid leaving sockets open which can trigger a ResourceWarning in some\n    # cases, and look like a memory leak in others.\n    with sessions.Session() as session:\n        return session.request(method=method, url=url, **kwargs)\n</code></pre> <p>(Source code sample from the Python requests library, Apache License, v2.0)</p> <p>Syntax highlighting support is available for and of the following languages listed on the highlightjs website. See the mkdocs \"styling your docs\" hljs_languages section for info on how to load languages dynamically.</p>"},{"location":"start/typography/#admonitions","title":"Admonitions","text":"<p>The following admonitions are formatted like the callouts above but can be implemented in Markdown when you include the <code>admonition</code> Markdown extension in your <code>mkdocs.yml</code> file.  </p> <p>Add the following setting to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - admonition\n</code></pre> <p>and then follow the instructions in the extension documentation to author admonitions in your documentation.</p>"},{"location":"start/typography/#blocks","title":"Blocks","text":"<p>Blocks are a way to add special formatting to sections of your documentation. They can be used for notes, warnings, tips, and more. Below are examples of different block types you can use.</p> <pre><code>!!! &lt;block-type&gt; \"block title\"\n    Write your note here.\n</code></pre>"},{"location":"start/typography/#general-blocks","title":"General Blocks","text":"<p>Note Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><pre><code>\n# this is a note\ndef func(arg) {\n  # notable things are in here!\n  return None\n}\n</code></pre></p> <p>Tip Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Quote Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"start/typography/#positive-blocks","title":"Positive Blocks","text":"<p>Success Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"start/typography/#negative-blocks","title":"Negative Blocks","text":"<p>Warning Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger Block</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"}]}